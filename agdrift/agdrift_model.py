import os
os.environ['DJANGO_SETTINGS_MODULE']='settings'
import numpy as np
from bisect import *
import logging
import sys
import math
from django.utils import simplejson

logger = logging.getLogger('agdrift Model')


def toJSON(agdrift_object):
    agdrift_vars = vars(agdrift_object)
    agdrift_json = simplejson.dumps(agdrift_vars)
    return agdrift_json

def fromJSON(json_string):
    agdrift_vars = simplejson.loads(json_string)
    agdrift_object = agdrift(True,False,vars_dict=agdrift_vars)
    return agdrift_object

class agdrift(object):
    def __init__(self, set_variables=True, run_methods=True, drop_size = '', ecosystem_type = '', application_method = '', boom_height = '', orchard_type = '', application_rate='', distance='',  aquatic_type='', calculation_input='', init_avg_dep_foa='', avg_depo_gha='', avg_depo_lbac='', deposition_ngL='', deposition_mgcm='', nasae='', y='', x='', express_y='', vars_dict=None):
        self.set_default_variables()
        if set_variables:
            if vars_dict != None:
                self.__dict__.update(vars_dict)
            else:
                self.drop_size = drop_size
                self.ecosystem_type = ecosystem_type 
                self.application_method = application_method
                self.boom_height = boom_height
                self.orchard_type = orchard_type
                self.application_rate = application_rate
                self.distance = distance
                self.aquatic_type = aquatic_type
                self.calculation_input = calculation_input
                self.init_avg_dep_foa = init_avg_dep_foa
                self.avg_depo_gha = avg_depo_gha
                self.avg_depo_lbac = avg_depo_lbac
                self.deposition_ngL = deposition_ngL
                self.deposition_mgcm = deposition_mgcm
                self.nasae = nasae
                self.y = y
                self.x = x
                self.express_y = express_y
            if run_methods:
                self.run_methods()
                logger.info(vars(self))
            # if run_methods:
            #     self.run_methods()

    def set_default_variables(self):
 #Currently used variables
        self.drop_size = ''
        self.ecosystem_type = '' 
        self.application_method = ''
        self.boom_height = ''
        self.orchard_type = ''
        self.application_rate = ''
        self.distance = ''
        self.aquatic_type = ''
        self.calculation_input = ''
        self.init_avg_dep_foa = -1
        self.avg_depo_lbac = -1
        self.avg_depo_gha  = -1
        self.deposition_ngL = -1
        self.deposition_mgcm = -1
        self.nasae = -1
        self.y = -1
        self.x = -1
        self.express_y = -1


    def set_variables(self, drop_size, ecosystem_type, application_method, boom_height, orchard_type, application_rate, distance, aquatic_type, calculation_input, init_avg_dep_foa, avg_depo_gha, avg_depo_lbac, deposition_ngL, deposition_mgcm, nasae, y, x, express_y):
        self.drop_size = drop_size
        self.ecosystem_type = ecosystem_type 
        self.application_method = application_method
        self.boom_height = boom_height
        self.orchard_type = orchard_type  
        self.application_rate = application_rate
        self.distance = distance
        self.aquatic_type = aquatic_type
        self.calculation_input = calculation_input
        self.init_avg_dep_foa = init_avg_dep_foa
        self.avg_depo_gha = avg_depo_gha
        self.avg_depo_lbac = avg_depo_lbac
        self.deposition_ngL = deposition_ngL
        self.deposition_mgcm = deposition_mgcm
        self.nasae = nasae
        self.y = y
        self.x = x
        self.express_y = express_y  
    def run_methods(self):
        self.results()
        if (self.calculation_input == 'Distance' ):
            self.results()
            self.express_extrapolate_f(self.y, self.nasae, self.distance)
            self.deposition_foa_to_gha_f(self.init_avg_dep_foa, self.application_rate)
            self.deposition_ghac_to_lbac_f(self.avg_depo_gha)
            self.deposition_gha_to_ngL_f(self.aquatic_type, self.avg_depo_gha)
            self.deposition_gha_to_mgcm_f(self.avg_depo_gha)

        elif (self.calculation_input == 'Fraction'):
            self.extrapolate_from_fig2(self.ecosystem_type, self.init_avg_dep_foa, bisect_left, self.x, self.y)
            self.deposition_foa_to_lbac_f(self.init_avg_dep_foa, self.application_rate)
            self.deposition_lbac_to_gha_f(self.avg_depo_lbac)
            self.deposition_gha_to_ngL_f(self.aquatic_type, self.avg_depo_gha)
            self.deposition_gha_to_mgcm_f(self.avg_depo_gha)

        elif (self.calculation_input == 'Initial Average Deposition (g/ha)'):
            self.deposition_ghac_to_lbac_f(self.avg_depo_gha)
            self.deposition_lbac_to_foa_f(self.avg_depo_lbac, self.application_rate)
            self.extrapolate_from_fig2(self.ecosystem_type, self.init_avg_dep_foa, bisect_left, self.x, self.y)
            self.deposition_gha_to_ngL_f(self.aquatic_type, self.avg_depo_gha)
            self.deposition_gha_to_mgcm_f(self.avg_depo_gha)

        elif (self.calculation_input == 'Initial Average Deposition (lb/ac)'):     
            print self.avg_depo_lbac
            self.deposition_lbac_to_gha_f(self.avg_depo_lbac)
            self.deposition_gha_to_ngL_f(self.aquatic_type, self.avg_depo_gha)
            self.deposition_gha_to_mgcm_f(self.avg_depo_gha)
            self.deposition_lbac_to_foa_f(self.avg_depo_lbac, self.application_rate)
            self.extrapolate_from_fig2(self.ecosystem_type, self.init_avg_dep_foa, bisect_left, self.x, self.y)

        elif (self.calculation_input == 'Initial Average Concentration (ng/L)'):
            self.deposition_ngL_2_gha_f(self.deposition_ngL)
            self.deposition_ghac_to_lbac_f(self.avg_depo_gha)
            self.deposition_lbac_to_foa_f(self.avg_depo_lbac, self.application_rate)
            self.extrapolate_from_fig2(self.ecosystem_type, self.init_avg_dep_foa, bisect_left, self.x, self.y)
            self.deposition_gha_to_mgcm_f(self.avg_depo_gha)

        else:  
            self.deposition_mgcm_to_gha_f(self.deposition_mgcm)
            self.deposition_ghac_to_lbac_f(self.avg_depo_gha)
            self.deposition_lbac_to_foa_f(self.avg_depo_lbac, self.application_rate)
            self.extrapolate_from_fig2(self.ecosystem_type, self.init_avg_dep_foa, bisect_left, self.x, self.y)
            self.deposition_gha_to_ngL_f(self.aquatic_type, self.avg_depo_gha)

    # def results(self):
    #     self.pond_ground_high_vf2f = [0.0616,0.0572,0.0455,0.0376,0.0267,0.0194,0.013,0.0098,0.0078,0.0064,0.0053,0.0046,0.0039,0.0035,0.003,0.0027,0.0024,0.0022,0.002,0.0018,0.0017,0.0015,0.0014,0.0013,0.0012]
    #     self.pond_ground_high_f2m = [0.0165,0.0137,0.0104,0.009,0.0071,0.0056,0.0042,0.0034,0.0028,0.0024,0.0021,0.0019,0.0017,0.0015,0.0014,0.0013,0.0012,0.0011,0.001,0.00095,0.0009,0.0008,0.0008,0.0007,0.0007]
    #     self.pond_ground_low_vf2f = [0.0268,0.0231,0.0167,0.0136,0.01,0.0076,0.0054,0.0043,0.0036,0.0031,0.0027,0.0024,0.0021,0.0019,0.0017,0.0016,0.0015,0.0013,0.0012,0.0012,0.0011,0.001,0.001,0.0009,0.0009]
    #     self.pond_ground_low_f2m = [0.0109,0.0086,0.0065,0.0056,0.0045,0.0036,0.0028,0.0023,0.0019,0.0017,0.0015,0.0013,0.0012,0.0011,0.001,0.0009,0.0009,0.0008,0.0008,0.0007,0.0007,0.0006,0.0006,0.0006,0.0006]
        
    # #####one less value (begin)
    #     self.pond_aerial_vf2f = [0.2425,0.2409,0.2344,0.2271,0.2083,0.1829,0.1455,0.1204,0.103,0.0904,0.0809,0.0734,0.0674,0.0625,0.0584,0.055,0.0521,0.0497,0.0476,0.0458,0.0442,0.0428,0.0416,0.0405,0.0396]
    #     self.pond_aerial_f2m = [0.1266,0.1247,0.1172,0.1094,0.0926,0.0743,0.0511,0.0392,0.0321,0.0272,0.0238,0.0212,0.0193,0.0177,0.0165,0.0155,0.0146,0.0139,0.0133,0.0128,0.0124,0.012,0.0117,0.0114,0.0111]
    #     self.pond_aerial_m2c = [0.0892,0.0900,0.0800,0.0700,0.0600,0.0400,0.0300,0.0200,0.0200,0.0130,0.0112,0.0099,0.0090,0.0083,0.0077,0.0073,0.0069,0.0066,0.0063,0.0060,0.0058,0.0056,0.0055,0.0053,0.0052]
    #     self.pond_aerial_c2vc = [0.0892,0.0900,0.0800,0.0700,0.0600,0.0400,0.0300,0.0200,0.0200,0.0130,0.0112,0.0099,0.0090,0.0083,0.0077,0.0073,0.0069,0.0066,0.0063,0.0060,0.0058,0.0056,0.0055,0.0053,0.0052]
    #     self.terr_aerial_vf2f = [0.5000,0.4913,0.4564,0.4220,0.3588,0.3039,0.2247,0.1741,0.1403,0.1171,0.1010,0.0893,0.0799,0.0729,0.0671,0.0626,0.0585,0.0550,0.0519,0.0494,0.0475,0.0458,0.0442,0.0428,0.0416]
    #     self.terr_aerial_f2m = [0.4999,0.4808,0.4046,0.3365,0.2231,0.1712,0.0979,0.0638,0.0469,0.0374,0.0312,0.0266,0.0234,0.021,0.0192,0.0177,0.0164,0.0154,0.0146,0.0139,0.0133,0.0128,0.0124,0.012,0.0117]
    #     self.terr_aerial_m2c =[0.5,0.4776,0.3882,0.3034,0.1711,0.1114,0.0561,0.0346,0.0249,0.0188,0.015,0.0126,0.011,0.0098,0.0089,0.0082,0.0077,0.0072,0.0069,0.0065,0.0063,0.006,0.0058,0.0056,0.0055]
    #     self.terr_aerial_c2vc =[0.5,0.4776,0.3882,0.3034,0.1711,0.1114,0.0561,0.0346,0.0249,0.0188,0.015,0.0126,0.011,0.0098,0.0089,0.0082,0.0077,0.0072,0.0069,0.0065,0.0063,0.006,0.0058,0.0056,0.0055]
    #     self.terr_ground_vf2f = [1.06,0.8564,0.4475,0.2595,0.104,0.05,0.0248,0.0164,0.012,0.0093,0.0075,0.0062,0.0053,0.0045,0.0039,0.0034,0.003,0.0027,0.0024,0.0022,0.002,0.0018,0.0017,0.0015,0.0014]
    # #####one less value (end)

    #     self.terr_ground_f2m = [1.01,0.3731,0.0889,0.0459,0.0208,0.0119,0.007,0.0051,0.004,0.0033,0.0028,0.0024,0.0021,0.0019,0.0017,0.0015,0.0014,0.0013,0.0012,0.0011,0.001,0.0009,0.0009,0.0008,0.0008]
    #     self.pond_airblast_normal = [0.0011,0.0011,0.001,0.0009,0.0007,0.0005,0.0003,0.0002,0.0002,0.0002,0.0001,0.0001,0.0000978,0.0000863,0.0000769,0.0000629,0.0000626,0.0000571,0.0000523,0.0000482,0.0000446,0.0000414,0.0000386,0.0000361,0.0000339]
    #     self.pond_airblast_dense = [0.0145,0.014,0.0122,0.0106,0.0074,0.005,0.003,0.0022,0.0017,0.0014,0.0012,0.0011,0.001,0.0009,0.0008,0.0007,0.0007,0.0006,0.0006,0.0005,0.0005,0.0005,0.0005,0.0004,0.0004]
    #     self.pond_airblast_sparse = [0.0416,0.0395,0.0323,0.0258,0.015,0.0077,0.0031,0.0017,0.001,0.0007,0.0005,0.0004,0.0003,0.0002,0.0002,0.0002,0.0001,0.0001,0.0000898,0.0000771,0.0000668,0.0000583,0.0000513,0.0000453,0.0000405]
    #     self.pond_airblast_vineyard = [0.0024,0.0023,0.0018,0.0014,0.0009,0.0006,0.0003,0.0002,0.0002,0.0001,0.0001,0.0001,0.0000881,0.0000765,0.0000672,0.0000596,0.0000533,0.000048,0.0000435,0.0000397,0.0000363,0.0000334,0.0000309,0.0000286,0.0000267]
    #     self.pond_airblast_orchard = [0.0218,0.0208,0.0175,0.0145,0.0093,0.0056,0.0031,0.0021,0.0016,0.0013,0.0011,0.0009,0.0008,0.0007,0.0007,0.0006,0.0005,0.0005,0.0005,0.0004,0.0004,0.0004,0.0004,0.0003,0.0003]
    #     self.terr_airblast_normal = [0.0089,0.0081,0.0058,0.0042,0.0023,0.0012,0.0006,0.0004,0.0003,0.0002,0.0002,0.0002,0.0001,0.0001,0.0000965,0.0000765,0.0000625,0.0000523,0.0000446,0.0000387]
    #     self.terr_airblast_dense = [0.1155,0.1078,0.0834,0.0631,0.033,0.0157,0.0065,0.0038,0.0026,0.002,0.0016,0.0014,0.0012,0.0011,0.0009,0.0008,0.0007,0.0006,0.0005,0.0005]
    #     self.terr_airblast_sparse = [0.4763,0.4385,0.3218,0.2285,0.1007,0.0373,0.0103,0.0044,0.0023,0.0014,0.0009,0.0006,0.0005,0.0004,0.0003,0.0002,0.0001,0.0000889,0.0000665,0.0000514]
    #     self.terr_airblast_vineyard = [0.0376,0.0324,0.0195,0.012,0.0047,0.0019,0.0008,0.0004,0.0003,0.0002,0.0002,0.0001,0.0001,0.0001,0.000087,0.0000667,0.0000531,0.0000434,0.0000363,0.000031]
    #     self.terr_airblast_orchard = [0.2223,0.2046,0.1506,0.108,0.0503,0.021,0.0074,0.004,0.0026,0.0019,0.0015,0.0012,0.0011,0.0009,0.0008,0.0006,0.0005,0.0005,0.0004,0.0004]

    #     if (self.ecosystem_type == 'EPA Pond' and self.application_method == 'Aerial' and self.drop_size == 'Fine'):
    #         self.y = self.pond_aerial_vf2f
    #         self.x = [0,1,5,10,25,50,100,150,200,250,300,350,400,450,500,550,600,650,700,750,800,850,900,950,997]
    #     elif (self.ecosystem_type == 'EPA Pond' and self.application_method == 'Aerial' and self.drop_size == 'Medium'):
    #         self.y = self.pond_aerial_f2m
    #         self.x = [0,1,5,10,25,50,100,150,200,250,300,350,400,450,500,550,600,650,700,750,800,850,900,950,997]
    #     elif (self.ecosystem_type == 'EPA Pond' and self.application_method == 'Aerial' and self.drop_size == 'Coarse'):
    #         self.y = self.pond_aerial_m2c   
    #     elif (self.ecosystem_type == 'EPA Pond' and self.application_method == 'Aerial' and self.drop_size == 'Very Coarse'):
    #         self.y = self.pond_aerial_c2vc      
    #         self.x = [0,1,5,10,25,50,100,150,200,250,300,350,400,450,500,550,600,650,700,750,800,850,900,950,997]
    #     elif (self.ecosystem_type == 'EPA Pond' and self.application_method == 'Ground' and self.drop_size == 'Fine' and self.boom_height == 'Low'):
    #         self.y = self.pond_ground_low_vf2f
    #         self.x = [0,1,5,10,25,50,100,150,200,250,300,350,400,450,500,550,600,650,700,750,800,850,900,950,997]
    #     elif (self.ecosystem_type == 'EPA Pond' and self.application_method == 'Ground' and self.drop_size == 'Medium' and self.boom_height == 'Low'): 
    #         self.y = self.pond_ground_low_f2m
    #         self.x = [0,1,5,10,25,50,100,150,200,250,300,350,400,450,500,550,600,650,700,750,800,850,900,950,997]
    #     elif (self.ecosystem_type == 'EPA Pond' and self.application_method == 'Ground' and self.drop_size == 'Fine' and self.boom_height == 'High'):
    #         self.y = self.pond_ground_high_vf2f
    #         self.x = [0,1,5,10,25,50,100,150,200,250,300,350,400,450,500,550,600,650,700,750,800,850,900,950,997]
    #     elif (self.ecosystem_type == 'EPA Pond' and self.application_method == 'Ground' and self.drop_size == 'Medium' and self.boom_height == 'High'): 
    #         self.y = self.pond_ground_high_f2m
    #         self.x = [0,1,5,10,25,50,100,150,200,250,300,350,400,450,500,550,600,650,700,750,800,850,900,950,997]
    #     elif (self.ecosystem_type == 'Terrestrial' and self.application_method == 'Aerial' and self.drop_size == 'Fine'):
    #         self.y = self.terr_aerial_vf2f
    #         self.x = [0,1,5,10,25,50,100,150,200,250,300,350,400,450,500,550,600,650,700,750,800,850,900,950,997]
    #     elif (self.ecosystem_type == 'Terrestrial' and self.application_method == 'Aerial' and self.drop_size == 'Medium'):
    #         self.y = self.terr_aerial_f2m
    #         self.x = [0,1,5,10,25,50,100,150,200,250,300,350,400,450,500,550,600,650,700,750,800,850,900,950,997]
    #     elif (self.ecosystem_type == 'Terrestrial' and self.application_method == 'Aerial' and self.drop_size == 'Coarse'):
    #         self.y = self.terr_aerial_m2c   
    #         self.x = [0,1,5,10,25,50,100,150,200,250,300,350,400,450,500,550,600,650,700,750,800,850,900,950,997]
    #     elif (self.ecosystem_type == 'Terrestrial' and self.application_method == 'Aerial' and self.drop_size == 'Very Coarse'):
    #         self.y = self.terr_aerial_c2vc   
    #         self.x = [0,1,5,10,25,50,100,150,200,250,300,350,400,450,500,550,600,650,700,750,800,850,900,950,997]
    #     elif (self.ecosystem_type == 'Terrestrial' and self.application_method == 'Ground' and self.drop_size == 'Fine'):
    #         self.y = self.terr_ground_vf2f
    #         self.x = [0,1,5,10,25,50,100,150,200,250,300,350,400,450,500,550,600,650,700,750,800,850,900,950,997]
    #     elif (self.ecosystem_type == 'Terrestrial' and self.application_method == 'Ground' and self.drop_size == 'Medium'): 
    #         self.y = self.terr_ground_f2m  
    #         self.x = [0,1,5,10,25,50,100,150,200,250,300,350,400,450,500,550,600,650,700,750,800,850,900,950,997]
    #     elif (self.ecosystem_type == 'EPA Pond' and self.application_method == 'Orchard/Airblast' and self.orchard_type == 'Normal'):
    #         self.y = self.pond_airblast_normal
    #         self.x = [0,1,5,10,25,50,100,150,200,250,300,350,400,450,500,550,600,650,700,750,800,850,900,950,997]
    #     elif (self.ecosystem_type == 'EPA Pond' and self.application_method == 'Orchard/Airblast' and self.orchard_type == 'Dense'):
    #         self.y = self.pond_airblast_dense                        
    #         self.x = [0,1,5,10,25,50,100,150,200,250,300,350,400,450,500,550,600,650,700,750,800,850,900,950,997]
    #     elif (self.ecosystem_type == 'EPA Pond' and self.application_method == 'Orchard/Airblast' and self.orchard_type == 'Sparse'):
    #         self.y = self.pond_airblast_sparse
    #         self.x = [0,1,5,10,25,50,100,150,200,250,300,350,400,450,500,550,600,650,700,750,800,850,900,950,997]
    #     elif (self.ecosystem_type == 'EPA Pond' and self.application_method == 'Orchard/Airblast' and self.orchard_type == 'Vineyard'):
    #         self.y = self.pond_airblast_vineyard            
    #         self.x = [0,1,5,10,25,50,100,150,200,250,300,350,400,450,500,550,600,650,700,750,800,850,900,950,997]
    #     elif (self.ecosystem_type == 'EPA Pond' and self.application_method == 'Orchard/Airblast' and self.orchard_type == 'Orchard'):
    #         self.y = pond_airblast_orchard
    #         self.x = [0,1,5,10,25,50,100,150,200,250,300,350,400,450,500,550,600,650,700,750,800,850,900,950,997]
    #     elif (self.ecosystem_type == 'Terrestrial' and self.application_method == 'Orchard/Airblast' and self.orchard_type == 'Normal'):
    #         self.y = self.terr_airblast_normal
    #         self.x = [0,1,5,10,25,50,100,150,200,250,300,350,400,450,500,600,700,800,900,997]            
    #     elif (self.ecosystem_type == 'Terrestrial' and self.application_method == 'Orchard/Airblast' and self.orchard_type == 'Dense'):
    #         self.y = self.terr_airblast_dense
    #         self.x = [0,1,5,10,25,50,100,150,200,250,300,350,400,450,500,600,700,800,900,997]
    #     elif (self.ecosystem_type == 'Terrestrial' and self.application_method == 'Orchard/Airblast' and self.orchard_type == 'Sparse'):
    #         self.y = self.terr_airblast_sparse
    #         self.x = [0,1,5,10,25,50,100,150,200,250,300,350,400,450,500,600,700,800,900,997]
    #     elif (self.ecosystem_type == 'Terrestrial' and self.application_method == 'Orchard/Airblast' and self.orchard_type == 'Vineyard'):
    #         self.y = self.terr_airblast_vineyard
    #         self.x = [0,1,5,10,25,50,100,150,200,250,300,350,400,450,500,600,700,800,900,997]
    #     elif (self.ecosystem_type == 'Terrestrial' and self.application_method == 'Orchard/Airblast' and self.orchard_type == 'Orchard'):
    #         self.y = self.terr_airblast_orchard
    #         self.x = [0,1,5,10,25,50,100,150,200,250,300,350,400,450,500,600,700,800,900,997]
    #         self.z = 4
    #     else:
    #         #print 2
    #         self.y = 3
    #     return self.x, self.y

    def results(self):
        self.pond_ground_high_vf2f = [6.164E+00,4.251E+00,3.425E+00,2.936E+00,2.607E+00,2.364E+00,2.173E+00,
        2.017E+00,1.886E+00,1.773E+00,1.674E+00,1.586E+00,1.508E+00,1.437E+00,
        1.372E+00,1.314E+00,1.260E+00,1.210E+00,1.163E+00,1.120E+00,1.080E+00,
        1.042E+00,1.007E+00,9.740E-01,9.427E-01,9.132E-01,8.853E-01,8.588E-01,
        8.337E-01,8.099E-01,7.871E-01,7.655E-01,7.449E-01,7.251E-01,7.063E-01,
        6.882E-01,6.709E-01,6.544E-01,6.385E-01,6.232E-01,6.085E-01,5.944E-01,
        5.808E-01,5.677E-01,5.551E-01,5.429E-01,5.312E-01,5.198E-01,5.089E-01,
        4.983E-01,4.880E-01,4.781E-01,4.685E-01,4.592E-01,4.502E-01,4.415E-01,
        4.331E-01,4.249E-01,4.169E-01,4.092E-01,4.017E-01,3.944E-01,3.873E-01,
        3.804E-01,3.737E-01,3.672E-01,3.609E-01,3.547E-01,3.487E-01,3.428E-01,
        3.371E-01,3.316E-01,3.262E-01,3.209E-01,3.157E-01,3.107E-01,3.058E-01,
        3.010E-01,2.964E-01,2.918E-01,2.874E-01,2.830E-01,2.788E-01,2.746E-01,
        2.706E-01,2.666E-01,2.628E-01,2.590E-01,2.553E-01,2.516E-01,2.481E-01,
        2.446E-01,2.412E-01,2.379E-01,2.347E-01,2.315E-01,2.284E-01,2.253E-01,
        2.223E-01,2.194E-01,2.165E-01]
        self.pond_ground_high_f2m = [1.650E+00,9.842E-01,8.413E-01,7.572E-01,6.978E-01,6.515E-01,6.135E-01,
        5.813E-01,5.534E-01,5.287E-01,5.067E-01,4.868E-01,4.686E-01,4.520E-01,
        4.367E-01,4.225E-01,4.093E-01,3.970E-01,3.854E-01,3.745E-01,3.643E-01,
        3.546E-01,3.454E-01,3.368E-01,3.285E-01,3.206E-01,3.131E-01,3.060E-01,
        2.991E-01,2.926E-01,2.863E-01,2.803E-01,2.745E-01,2.689E-01,2.636E-01,
        2.584E-01,2.535E-01,2.487E-01,2.440E-01,2.396E-01,2.353E-01,2.311E-01,
        2.270E-01,2.231E-01,2.193E-01,2.157E-01,2.121E-01,2.086E-01,2.053E-01,
        2.020E-01,1.988E-01,1.958E-01,1.928E-01,1.898E-01,1.870E-01,1.842E-01,
        1.815E-01,1.789E-01,1.764E-01,1.739E-01,1.714E-01,1.690E-01,1.667E-01,
        1.645E-01,1.623E-01,1.601E-01,1.580E-01,1.559E-01,1.539E-01,1.520E-01,
        1.500E-01,1.481E-01,1.463E-01,1.445E-01,1.427E-01,1.410E-01,1.393E-01,
        1.376E-01,1.360E-01,1.344E-01,1.329E-01,1.313E-01,1.298E-01,1.284E-01,
        1.269E-01,1.255E-01,1.241E-01,1.227E-01,1.214E-01,1.201E-01,1.188E-01,
        1.175E-01,1.163E-01,1.151E-01,1.139E-01,1.127E-01,1.115E-01,1.104E-01,
        1.093E-01,1.082E-01,1.071E-01]
        self.pond_ground_low_vf2f = [2.681E+00,1.549E+00,1.250E+00,1.087E+00,9.800E-01,9.006E-01,8.380E-01,
        7.864E-01,7.426E-01,7.047E-01,6.714E-01,6.417E-01,6.150E-01,5.908E-01,
        5.687E-01,5.484E-01,5.296E-01,5.122E-01,4.960E-01,4.809E-01,4.667E-01,
        4.534E-01,4.409E-01,4.290E-01,4.178E-01,4.072E-01,3.971E-01,3.875E-01,
        3.783E-01,3.696E-01,3.613E-01,3.533E-01,3.456E-01,3.383E-01,3.313E-01,
        3.246E-01,3.181E-01,3.118E-01,3.058E-01,3.000E-01,2.944E-01,2.890E-01,
        2.838E-01,2.788E-01,2.739E-01,2.692E-01,2.646E-01,2.602E-01,2.559E-01,
        2.517E-01,2.477E-01,2.438E-01,2.400E-01,2.363E-01,2.327E-01,2.292E-01,
        2.258E-01,2.225E-01,2.193E-01,2.161E-01,2.131E-01,2.101E-01,2.072E-01,
        2.043E-01,2.016E-01,1.989E-01,1.962E-01,1.937E-01,1.911E-01,1.887E-01,
        1.863E-01,1.839E-01,1.816E-01,1.794E-01,1.772E-01,1.751E-01,1.730E-01,
        1.709E-01,1.689E-01,1.669E-01,1.650E-01,1.631E-01,1.612E-01,1.594E-01,
        1.576E-01,1.559E-01,1.542E-01,1.525E-01,1.508E-01,1.492E-01,1.476E-01,
        1.461E-01,1.445E-01,1.430E-01,1.415E-01,1.401E-01,1.387E-01,1.373E-01,
        1.359E-01,1.345E-01,1.332E-01]
        self.pond_ground_low_f2m = [1.090E+00,6.124E-01,5.272E-01,4.774E-01,4.422E-01,4.147E-01,3.922E-01,
        3.730E-01,3.563E-01,3.416E-01,3.284E-01,3.165E-01,3.056E-01,2.956E-01,
        2.863E-01,2.778E-01,2.698E-01,2.623E-01,2.553E-01,2.487E-01,2.425E-01,
        2.366E-01,2.311E-01,2.258E-01,2.207E-01,2.159E-01,2.113E-01,2.069E-01,
        2.027E-01,1.987E-01,1.948E-01,1.911E-01,1.876E-01,1.841E-01,1.808E-01,
        1.776E-01,1.746E-01,1.716E-01,1.687E-01,1.659E-01,1.633E-01,1.607E-01,
        1.581E-01,1.557E-01,1.533E-01,1.510E-01,1.488E-01,1.466E-01,1.445E-01,
        1.425E-01,1.405E-01,1.385E-01,1.366E-01,1.348E-01,1.330E-01,1.312E-01,
        1.295E-01,1.279E-01,1.263E-01,1.247E-01,1.231E-01,1.216E-01,1.201E-01,
        1.187E-01,1.173E-01,1.159E-01,1.145E-01,1.132E-01,1.119E-01,1.107E-01,
        1.094E-01,1.082E-01,1.070E-01,1.059E-01,1.047E-01,1.036E-01,1.025E-01,
        1.014E-01,1.004E-01,9.935E-02,9.834E-02,9.734E-02,9.637E-02,9.541E-02,
        9.447E-02,9.354E-02,9.263E-02,9.174E-02,9.087E-02,9.001E-02,8.916E-02,
        8.833E-02,8.751E-02,8.671E-02,8.591E-02,8.514E-02,8.437E-02,8.362E-02,
        8.288E-02,8.215E-02,8.143E-02]

        self.pond_aerial_vf2f = [2.425E+01,2.319E+01,2.227E+01,2.144E+01,2.069E+01,1.997E+01,1.930E+01,1.866E+01,1.806E+01,1.749E+01,1.696E+01,1.645E+01,1.596E+01,1.549E+01,1.506E+01,1.464E+01,1.425E+01,1.388E+01,1.353E+01,1.320E+01,1.288E+01,1.257E+01,1.228E+01,1.200E+01,1.174E+01,1.149E+01,1.125E+01,1.103E+01,1.081E+01,1.059E+01,1.039E+01,1.020E+01,1.001E+01,9.837E+00,9.670E+00,
            9.510E+00,9.350E+00,9.200E+00,9.058E+00,8.920E+00,8.780E+00,8.650E+00,8.520E+00,8.400E+00,8.290E+00,8.170E+00,8.060E+00,7.950E+00,7.850E+00,7.750E+00,7.650E+00,7.554E+00,7.460E+00,7.370E+00,7.290E+00,7.200E+00,7.120E+00,7.040E+00,6.960E+00,6.880E+00,6.810E+00,6.741E+00,6.670E+00,6.600E+00,6.540E+00,6.470E+00,6.410E+00,6.350E+00,6.290E+00,6.230E+00,6.170E+00,6.120E+00,6.060E+00,6.010E+00,5.960E+00,5.904E+00,5.850E+00,5.806E+00,5.760E+00,5.710E+00,5.670E+00,5.624E+00,5.580E+00,5.540E+00,5.490E+00,5.450E+00,5.413E+00,5.370E+00,5.340E+00,5.300E+00,5.260E+00,5.230E+00,5.190E+00,5.160E+00,5.120E+00,5.090E+00,5.060E+00,5.030E+00,5.000E+00,4.970E+00,4.940E+00]
        self.pond_aerial_f2m = [1.266E+01,1.142E+01,1.050E+01,9.757E+00,9.147E+00,8.623E+00,8.146E+00,
                        7.698E+00,7.271E+00,6.871E+00,6.509E+00,6.188E+00,5.899E+00,5.635E+00,
                        5.388E+00,5.160E+00,4.953E+00,4.765E+00,4.594E+00,4.437E+00,4.291E+00,
                        4.154E+00,4.025E+00,3.903E+00,3.789E+00,3.682E+00,3.581E+00,3.488E+00,
                        3.403E+00,3.323E+00,3.245E+00,3.170E+00,3.097E+00,3.027E+00,2.961E+00,
                        2.898E+00,2.839E+00,2.783E+00,2.729E+00,2.677E+00,2.627E+00,2.579E+00,
                        2.533E+00,2.488E+00,2.446E+00,2.405E+00,2.366E+00,2.329E+00,2.292E+00,
                        2.258E+00,2.225E+00,2.193E+00,2.162E+00,2.132E+00,2.104E+00,2.076E+00,
                        2.049E+00,2.023E+00,1.998E+00,1.974E+00,1.950E+00,1.928E+00,1.905E+00,
                        1.884E+00,1.863E+00,1.842E+00,1.823E+00,1.804E+00,1.785E+00,1.767E+00,
                        1.749E+00,1.732E+00,1.715E+00,1.698E+00,1.683E+00,1.667E+00,1.652E+00,
                        1.637E+00,1.623E+00,1.608E+00,1.595E+00,1.581E+00,1.568E+00,1.555E+00,
                        1.543E+00,1.531E+00,1.519E+00,1.507E+00,1.496E+00,1.485E+00,1.474E+00,
                        1.464E+00,1.454E+00,1.444E+00,1.434E+00,1.425E+00,1.416E+00,1.407E+00,
                        1.398E+00,1.389E+00,1.381E+00]
        self.pond_aerial_m2c = [8.918E+00,7.649E+00,6.759E+00,6.103E+00,5.593E+00,5.180E+00,4.829E+00,
        4.513E+00,4.217E+00,3.934E+00,3.670E+00,3.437E+00,3.239E+00,3.070E+00,
        2.920E+00,2.782E+00,2.654E+00,2.535E+00,2.426E+00,2.324E+00,2.232E+00,
        2.149E+00,2.072E+00,2.001E+00,1.933E+00,1.869E+00,1.808E+00,1.750E+00,
        1.696E+00,1.645E+00,1.598E+00,1.553E+00,1.511E+00,1.471E+00,1.434E+00,
        1.399E+00,1.365E+00,1.334E+00,1.304E+00,1.276E+00,1.249E+00,1.223E+00,
        1.198E+00,1.175E+00,1.153E+00,1.132E+00,1.113E+00,1.094E+00,1.076E+00,
        1.058E+00,1.041E+00,1.026E+00,1.010E+00,9.957E-01,9.816E-01,9.681E-01,
        9.551E-01,9.427E-01,9.307E-01,9.191E-01,9.080E-01,8.972E-01,8.868E-01,
        8.768E-01,8.671E-01,8.578E-01,8.487E-01,8.399E-01,8.313E-01,8.231E-01,
        8.151E-01,8.073E-01,7.998E-01,7.926E-01,7.855E-01,7.787E-01,7.720E-01,
        7.655E-01,7.591E-01,7.529E-01,7.468E-01,7.409E-01,7.352E-01,7.296E-01,
        7.242E-01,7.188E-01,7.136E-01,7.085E-01,7.035E-01,6.986E-01,6.939E-01,
        6.892E-01,6.847E-01,6.802E-01,6.758E-01,6.716E-01,6.674E-01,6.633E-01,
        6.593E-01,6.554E-01,6.516E-01]
        self.pond_aerial_c2vc = [6.879E+00,5.622E+00,4.785E+00,4.190E+00,3.747E+00,3.401E+00,3.123E+00,
        2.893E+00,2.692E+00,2.505E+00,2.331E+00,2.175E+00,2.043E+00,1.930E+00,
        1.830E+00,1.738E+00,1.653E+00,1.574E+00,1.501E+00,1.434E+00,1.373E+00,
        1.318E+00,1.268E+00,1.221E+00,1.178E+00,1.137E+00,1.099E+00,1.064E+00,
        1.031E+00,1.000E+00,9.720E-01,9.456E-01,9.208E-01,8.977E-01,8.761E-01,
        8.559E-01,8.369E-01,8.190E-01,8.020E-01,7.858E-01,7.705E-01,7.559E-01,
        7.420E-01,7.287E-01,7.161E-01,7.039E-01,6.923E-01,6.811E-01,6.703E-01,
        6.599E-01,6.497E-01,6.399E-01,6.304E-01,6.211E-01,6.121E-01,6.034E-01,
        5.948E-01,5.865E-01,5.783E-01,5.703E-01,5.626E-01,5.550E-01,5.476E-01,
        5.403E-01,5.332E-01,5.263E-01,5.194E-01,5.127E-01,5.062E-01,4.998E-01,
        4.935E-01,4.874E-01,4.815E-01,4.756E-01,4.699E-01,4.643E-01,4.589E-01,
        4.536E-01,4.484E-01,4.434E-01,4.384E-01,4.336E-01,4.290E-01,4.244E-01,
        4.200E-01,4.157E-01,4.115E-01,4.075E-01,4.035E-01,3.997E-01,3.960E-01,
        3.924E-01,3.889E-01,3.855E-01,3.822E-01,3.790E-01,3.759E-01,3.729E-01,
        3.700E-01,3.671E-01,3.644E-01]
    #     self.terr_aerial_vf2f = [0.5000,0.4913,0.4564,0.4220,0.3588,0.3039,0.2247,0.1741,0.1403,0.1171,0.1010,0.0893,0.0799,0.0729,0.0671,0.0626,0.0585,0.0550,0.0519,0.0494,0.0475,0.0458,0.0442,0.0428,0.0416]
    #     self.terr_aerial_f2m = [0.4999,0.4808,0.4046,0.3365,0.2231,0.1712,0.0979,0.0638,0.0469,0.0374,0.0312,0.0266,0.0234,0.021,0.0192,0.0177,0.0164,0.0154,0.0146,0.0139,0.0133,0.0128,0.0124,0.012,0.0117]
    #     self.terr_aerial_m2c =[0.5,0.4776,0.3882,0.3034,0.1711,0.1114,0.0561,0.0346,0.0249,0.0188,0.015,0.0126,0.011,0.0098,0.0089,0.0082,0.0077,0.0072,0.0069,0.0065,0.0063,0.006,0.0058,0.0056,0.0055]
    #     self.terr_aerial_c2vc =[0.5,0.4776,0.3882,0.3034,0.1711,0.1114,0.0561,0.0346,0.0249,0.0188,0.015,0.0126,0.011,0.0098,0.0089,0.0082,0.0077,0.0072,0.0069,0.0065,0.0063,0.006,0.0058,0.0056,0.0055]
    #     self.terr_ground_vf2f = [1.06,0.8564,0.4475,0.2595,0.104,0.05,0.0248,0.0164,0.012,0.0093,0.0075,0.0062,0.0053,0.0045,0.0039,0.0034,0.003,0.0027,0.0024,0.0022,0.002,0.0018,0.0017,0.0015,0.0014]
    # #####one less value (end)

    #     self.terr_ground_f2m = [1.01,0.3731,0.0889,0.0459,0.0208,0.0119,0.007,0.0051,0.004,0.0033,0.0028,0.0024,0.0021,0.0019,0.0017,0.0015,0.0014,0.0013,0.0012,0.0011,0.001,0.0009,0.0009,0.0008,0.0008]
    #     self.pond_airblast_normal = [0.0011,0.0011,0.001,0.0009,0.0007,0.0005,0.0003,0.0002,0.0002,0.0002,0.0001,0.0001,0.0000978,0.0000863,0.0000769,0.0000629,0.0000626,0.0000571,0.0000523,0.0000482,0.0000446,0.0000414,0.0000386,0.0000361,0.0000339]
    #     self.pond_airblast_dense = [0.0145,0.014,0.0122,0.0106,0.0074,0.005,0.003,0.0022,0.0017,0.0014,0.0012,0.0011,0.001,0.0009,0.0008,0.0007,0.0007,0.0006,0.0006,0.0005,0.0005,0.0005,0.0005,0.0004,0.0004]
        self.pond_airblast_sparse = [2.180E+00,1.642E+00,1.301E+00,1.067E+00,8.998E-01,7.748E-01,6.784E-01,
        6.021E-01,5.404E-01,4.896E-01,4.472E-01,4.112E-01,3.805E-01,3.539E-01,
        3.307E-01,3.103E-01,2.922E-01,2.761E-01,2.617E-01,2.487E-01,2.369E-01,
        2.262E-01,2.164E-01,2.075E-01,1.992E-01,1.916E-01,1.846E-01,1.781E-01,
        1.720E-01,1.663E-01,1.610E-01,1.561E-01,1.514E-01,1.470E-01,1.429E-01,
        1.389E-01,1.352E-01,1.317E-01,1.284E-01,1.252E-01,1.222E-01,1.194E-01,
        1.166E-01,1.140E-01,1.115E-01,1.092E-01,1.069E-01,1.047E-01,1.026E-01,
        1.005E-01,9.861E-02,9.674E-02,9.493E-02,9.320E-02,9.152E-02,8.991E-02,
        8.835E-02,8.684E-02,8.538E-02,8.397E-02,8.261E-02,8.128E-02,8.000E-02,
        7.876E-02,7.755E-02,7.638E-02,7.525E-02,7.414E-02,7.307E-02,7.202E-02,
        7.101E-02,7.002E-02,6.906E-02,6.812E-02,6.721E-02,6.632E-02,6.545E-02,
        6.461E-02,6.378E-02,6.297E-02,6.219E-02,6.142E-02,6.067E-02,5.994E-02,
        5.922E-02,5.852E-02,5.784E-02,5.717E-02,5.651E-02,5.587E-02,5.524E-02,
        5.463E-02,5.403E-02,5.344E-02,5.286E-02,5.229E-02,5.174E-02,5.119E-02,
        5.066E-02,5.014E-02,4.962E-02]
        self.pond_airblast_vineyard = [2.433E-01,1.658E-01,1.274E-01,1.039E-01,8.835E-02,7.712E-02,6.860E-02,
        6.188E-02,5.642E-02,5.188E-02,4.804E-02,4.474E-02,4.186E-02,3.933E-02,
        3.709E-02,3.508E-02,3.327E-02,3.163E-02,3.014E-02,2.877E-02,2.752E-02,
        2.636E-02,2.529E-02,2.429E-02,2.336E-02,2.250E-02,2.169E-02,2.093E-02,
        2.021E-02,1.954E-02,1.891E-02,1.831E-02,1.774E-02,1.720E-02,1.669E-02,
        1.621E-02,1.575E-02,1.531E-02,1.489E-02,1.449E-02,1.411E-02,1.375E-02,
        1.340E-02,1.306E-02,1.274E-02,1.243E-02,1.214E-02,1.185E-02,1.158E-02,
        1.132E-02,1.106E-02,1.082E-02,1.059E-02,1.036E-02,1.014E-02,9.928E-03,
        9.724E-03,9.527E-03,9.336E-03,9.152E-03,8.973E-03,8.800E-03,8.632E-03,
        8.470E-03,8.312E-03,8.160E-03,8.011E-03,7.868E-03,7.728E-03,7.592E-03,
        7.460E-03,7.332E-03,7.207E-03,7.086E-03,6.968E-03,6.853E-03,6.742E-03,
        6.633E-03,6.527E-03,6.423E-03,6.323E-03,6.224E-03,6.129E-03,6.035E-03,
        5.944E-03,5.855E-03,5.769E-03,5.684E-03,5.601E-03,5.521E-03,5.442E-03,
        5.365E-03,5.289E-03,5.215E-03,5.143E-03,5.073E-03,5.004E-03,4.937E-03,
        4.871E-03,4.806E-03,4.743E-03]
    #     self.pond_airblast_orchard = [0.0218,0.0208,0.0175,0.0145,0.0093,0.0056,0.0031,0.0021,0.0016,0.0013,0.0011,0.0009,0.0008,0.0007,0.0007,0.0006,0.0005,0.0005,0.0005,0.0004,0.0004,0.0004,0.0004,0.0003,0.0003]
    #     self.terr_airblast_normal = [0.0089,0.0081,0.0058,0.0042,0.0023,0.0012,0.0006,0.0004,0.0003,0.0002,0.0002,0.0002,0.0001,0.0001,0.0000965,0.0000765,0.0000625,0.0000523,0.0000446,0.0000387]
    #     self.terr_airblast_dense = [0.1155,0.1078,0.0834,0.0631,0.033,0.0157,0.0065,0.0038,0.0026,0.002,0.0016,0.0014,0.0012,0.0011,0.0009,0.0008,0.0007,0.0006,0.0005,0.0005]
    #     self.terr_airblast_sparse = [0.4763,0.4385,0.3218,0.2285,0.1007,0.0373,0.0103,0.0044,0.0023,0.0014,0.0009,0.0006,0.0005,0.0004,0.0003,0.0002,0.0001,0.0000889,0.0000665,0.0000514]
    #     self.terr_airblast_vineyard = [0.0376,0.0324,0.0195,0.012,0.0047,0.0019,0.0008,0.0004,0.0003,0.0002,0.0002,0.0001,0.0001,0.0001,0.000087,0.0000667,0.0000531,0.0000434,0.0000363,0.000031]
    #     self.terr_airblast_orchard = [0.2223,0.2046,0.1506,0.108,0.0503,0.021,0.0074,0.004,0.0026,0.0019,0.0015,0.0012,0.0011,0.0009,0.0008,0.0006,0.0005,0.0005,0.0004,0.0004]
        if (self.ecosystem_type == 'EPA Pond' and self.application_method == 'Aerial' and self.drop_size == 'Fine'):
            self.y = self.pond_aerial_vf2f
            #self.x = [0,1,5,10,25,50,100,150,200,250,300,350,400,450,500,550,600,650,700,750,800,850,900,950,997]
            self.nasae = int(0)
            self.express_y = [23.19, 22.73, 22.27, 21.855, 21.44, 21.065, 20.69, 20.33, 19.97, 19.634999999999998, 19.3, 18.98, 18.66, 18.36, 18.06, 17.775, 17.49, 17.225, 16.96, 16.705, 16.45, 16.205, 15.96, 15.725000000000001, 15.49, 15.275, 15.06, 14.850000000000001, 14.64, 14.445, 14.25, 14.065000000000001, 13.88, 13.705, 13.53, 13.364999999999998, 13.2, 13.04, 12.88, 12.725000000000001, 12.57, 12.425, 12.28, 12.14, 12.0, 11.870000000000001, 11.74, 11.615, 11.49, 11.370000000000001, 11.25, 11.14, 11.03, 10.92, 10.81, 10.7, 10.59, 10.49, 10.39, 10.295, 10.2, 10.105, 10.01, 9.9235, 9.837, 9.753499999999999, 9.67, 9.59, 9.51, 9.43, 9.35, 9.274999999999999, 9.2, 9.129, 9.058, 8.989, 8.92, 8.85, 8.78, 8.715, 8.65, 8.585, 8.52, 8.46, 8.4, 8.344999999999999, 8.29, 8.23, 8.17, 8.115, 8.06, 8.005, 7.95, 7.9, 7.85, 7.8, 7.75, 7.7, 7.65, 7.602, 7.554, 7.507, 7.46, 7.415, 7.37, 7.33, 7.29, 7.245, 7.2, 7.16, 7.12, 7.08, 7.04, 7.0, 6.96, 6.92, 6.88, 6.845, 6.81, 6.775499999999999, 6.741, 6.7055, 6.67, 6.635, 6.6, 6.57, 6.54, 6.505, 6.47, 6.4399999999999995, 6.41, 6.38, 6.35, 6.32, 6.29, 6.26, 6.23, 6.2, 6.17, 6.145, 6.12, 6.09, 6.06, 6.035, 6.01, 5.984999999999999, 5.96, 5.932, 5.904, 5.877, 5.85, 5.827999999999999, 5.806, 5.7829999999999995, 5.76, 5.734999999999999, 5.71, 5.6899999999999995, 5.67, 5.647, 5.624, 5.602, 5.58, 5.5600000000000005, 5.54, 5.515000000000001, 5.49, 5.470000000000001, 5.45, 5.4315, 5.413, 5.391500000000001, 5.37, 5.355, 5.34, 5.32, 5.3, 5.279999999999999, 5.26, 5.245, 5.23, 5.210000000000001, 5.19, 5.175000000000001, 5.16, 5.140000000000001, 5.12, 5.105, 5.09, 5.074999999999999, 5.06, 5.045, 5.03, 5.015000000000001, 5.0, 4.984999999999999, 4.97, 4.955, 4.94, 4.925000000000001, 4.910000000000001, 4.895000000000001, 4.880000000000001, 4.865000000000004, 4.850000000000001, 4.835000000000001, 4.820000000000004, 4.805000000000003, 4.790000000000003, 4.775000000000002, 4.760000000000005, 4.7450000000000045, 4.730000000000004, 4.715000000000003, 4.700000000000003, 4.685000000000009, 4.670000000000009, 4.655000000000008, 4.640000000000008, 4.625000000000007, 4.6100000000000065, 4.595000000000013, 4.579999999999998, 4.565000000000012, 4.550000000000011, 4.535000000000011, 4.52000000000001, 4.50500000000001, 4.490000000000009, 4.4750000000000085, 4.460000000000008, 4.445000000000007, 4.430000000000007, 4.415000000000006, 4.40000000000002, 4.385000000000019, 4.370000000000019, 4.355000000000018, 4.340000000000018, 4.325000000000017, 4.3100000000000165, 4.295000000000016, 4.280000000000015, 4.265000000000015, 4.250000000000014, 4.235000000000028, 4.220000000000013, 4.2050000000000125, 4.189999999999998, 4.174999999999997, 4.160000000000025, 4.145000000000039, 4.130000000000024, 4.1150000000000375, 4.100000000000023, 4.085000000000036, 4.070000000000022, 4.055000000000035, 4.0400000000000205, 4.025000000000034, 4.010000000000019, 3.995000000000033, 3.980000000000018, 3.9650000000000034, 3.950000000000017, 3.9350000000000023, 3.920000000000016, 3.905000000000001, 3.890000000000015, 3.875, 3.8600000000000136, 3.8450000000000273, 3.830000000000041, 3.815000000000026, 3.80000000000004, 3.785000000000025, 3.7700000000000387, 3.755000000000024, 3.7400000000000375, 3.7250000000000227, 3.7100000000000364, 3.6950000000000216, 3.6800000000000352, 3.6650000000000205, 3.650000000000034, 3.6350000000000193, 3.620000000000033, 3.605000000000018, 3.590000000000032, 3.575000000000017, 3.5600000000000307, 3.545000000000016, 3.5300000000000296, 3.515000000000043, 3.5000000000000284, 3.485000000000042, 3.4700000000000273, 3.455000000000041, 3.440000000000026, 3.42500000000004]
            self.x = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299]
        elif (self.ecosystem_type == 'EPA Pond' and self.application_method == 'Aerial' and self.drop_size == 'Medium'):
            self.y = self.pond_aerial_f2m
            #self.x = [0,1,5,10,25,50,100,150,200,250,300,350,400,450,500,550,600,650,700,750,800,850,900,950,997]
            self.nasae = 1
            self.express_y = [11.42, 10.96, 10.5, 10.128499999999999, 9.757, 9.452, 9.147, 8.885, 8.623, 8.3845, 8.146, 7.922000000000001, 7.698, 7.484500000000001, 7.271, 7.071, 6.871, 6.69, 6.509, 6.3485, 6.188, 6.0435, 5.899, 5.7669999999999995, 5.635, 5.5115, 5.388, 5.274, 5.16, 5.0565, 4.953, 4.859, 4.765, 4.6795, 4.594, 4.5155, 4.437, 4.364000000000001, 4.291, 4.2225, 4.154, 4.0895, 4.025, 3.9640000000000004, 3.903, 3.846, 3.789, 3.7355, 3.682, 3.6315, 3.581, 3.5345, 3.488, 3.4455, 3.403, 3.363, 3.323, 3.284, 3.245, 3.2075, 3.17, 3.1334999999999997, 3.097, 3.0620000000000003, 3.027, 2.9939999999999998, 2.961, 2.9295, 2.898, 2.8685, 2.839, 2.811, 2.783, 2.7560000000000002, 2.729, 2.7030000000000003, 2.677, 2.652, 2.627, 2.6029999999999998, 2.579, 2.556, 2.533, 2.5105, 2.488, 2.467, 2.446, 2.4255, 2.405, 2.3855, 2.366, 2.3475, 2.329, 2.3105, 2.292, 2.275, 2.258, 2.2415000000000003, 2.225, 2.209, 2.193, 2.1775, 2.162, 2.1470000000000002, 2.132, 2.1180000000000003, 2.104, 2.09, 2.076, 2.0625, 2.049, 2.036, 2.023, 2.0105, 1.998, 1.986, 1.974, 1.962, 1.95, 1.939, 1.928, 1.9165, 1.905, 1.8944999999999999, 1.884, 1.8735, 1.863, 1.8525, 1.842, 1.8325, 1.823, 1.8135, 1.804, 1.7945, 1.785, 1.7759999999999998, 1.767, 1.758, 1.749, 1.7405, 1.732, 1.7235, 1.715, 1.7065000000000001, 1.698, 1.6905000000000001, 1.683, 1.675, 1.667, 1.6595, 1.652, 1.6444999999999999, 1.637, 1.63, 1.623, 1.6155, 1.608, 1.6015000000000001, 1.595, 1.588, 1.581, 1.5745, 1.568, 1.5615, 1.555, 1.549, 1.543, 1.537, 1.531, 1.525, 1.519, 1.513, 1.507, 1.5015, 1.496, 1.4905, 1.485, 1.4795, 1.474, 1.4689999999999999, 1.464, 1.459, 1.454, 1.4489999999999998, 1.444, 1.439, 1.434, 1.4295, 1.425, 1.4205, 1.416, 1.4115, 1.407, 1.4024999999999999, 1.398, 1.3935, 1.389, 1.385, 1.381, 1.3769999999999998, 1.373, 1.3690000000000002, 1.3649999999999998, 1.3609999999999998, 1.3570000000000002, 1.3529999999999998, 1.3490000000000002, 1.3450000000000006, 1.3409999999999993, 1.3369999999999997, 1.3330000000000002, 1.3290000000000006, 1.3249999999999993, 1.3209999999999997, 1.3170000000000002, 1.3130000000000006, 1.309000000000001, 1.3049999999999997, 1.3010000000000002, 1.2970000000000006, 1.2929999999999993, 1.2889999999999997, 1.2850000000000001, 1.2809999999999988, 1.277000000000001, 1.2729999999999997, 1.2689999999999984, 1.2650000000000006, 1.2609999999999992, 1.2570000000000014, 1.2530000000000001, 1.2489999999999988, 1.245000000000001, 1.2409999999999997, 1.2370000000000019, 1.2330000000000005, 1.2289999999999992, 1.2250000000000014, 1.221, 1.2170000000000023, 1.213000000000001, 1.2089999999999996, 1.2050000000000018, 1.200999999999997, 1.1969999999999992, 1.1929999999999978, 1.189, 1.1849999999999952, 1.1809999999999974, 1.1769999999999996, 1.1730000000000018, 1.168999999999997, 1.1649999999999991, 1.1610000000000014, 1.1569999999999965, 1.1529999999999987, 1.149000000000001, 1.144999999999996, 1.1409999999999982, 1.1370000000000005, 1.1330000000000027, 1.1289999999999978, 1.125, 1.1210000000000022, 1.1169999999999973, 1.1129999999999995, 1.1090000000000018, 1.105000000000004, 1.100999999999999, 1.0970000000000013, 1.0930000000000035, 1.0889999999999986, 1.0850000000000009, 1.081000000000003, 1.0769999999999982, 1.0730000000000004, 1.0690000000000026, 1.0650000000000048, 1.061, 1.0570000000000022, 1.0530000000000044, 1.0489999999999995, 1.0450000000000017, 1.041000000000004, 1.036999999999999, 1.0330000000000013, 1.0290000000000035, 1.0250000000000057, 1.0210000000000008, 1.016999999999996, 1.0129999999999981, 1.0090000000000003, 1.0049999999999955, 1.0009999999999906, 0.9969999999999999, 0.992999999999995, 0.9889999999999901, 0.9849999999999994, 0.9809999999999945, 0.9770000000000039] 
            self.x = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299]

        elif (self.ecosystem_type == 'EPA Pond' and self.application_method == 'Aerial' and self.drop_size == 'Coarse'):
            self.y = self.pond_aerial_m2c   
            self.nasae = 2
            self.express_y = [7.649, 7.204000000000001, 6.759, 6.431, 6.103, 5.848, 5.593, 5.3865, 5.18, 5.0045, 4.829, 4.670999999999999, 4.513, 4.365, 4.217, 4.0755, 3.934, 3.802, 3.67, 3.5534999999999997, 3.437, 3.338, 3.239, 3.1544999999999996, 3.07, 2.995, 2.92, 2.851, 2.782, 2.718, 2.654, 2.5945, 2.535, 2.4805, 2.426, 2.375, 2.324, 2.278, 2.232, 2.1905, 2.149, 2.1105, 2.072, 2.0365, 2.001, 1.967, 1.933, 1.901, 1.869, 1.8385, 1.808, 1.779, 1.75, 1.7229999999999999, 1.696, 1.6705, 1.645, 1.6215000000000002, 1.598, 1.5755, 1.553, 1.532, 1.511, 1.491, 1.471, 1.4525000000000001, 1.434, 1.4165, 1.399, 1.3820000000000001, 1.365, 1.3495, 1.334, 1.319, 1.304, 1.29, 1.276, 1.2625000000000002, 1.249, 1.2360000000000002, 1.223, 1.2105000000000001, 1.198, 1.1865, 1.175, 1.1640000000000001, 1.153, 1.1425, 1.132, 1.1225, 1.113, 1.1035, 1.094, 1.085, 1.076, 1.0670000000000002, 1.058, 1.0495, 1.041, 1.0335, 1.026, 1.018, 1.01, 1.00285, 0.9957, 0.98865, 0.9816, 0.97485, 0.9681, 0.9616, 0.9551, 0.9489, 0.9427, 0.9367, 0.9307, 0.9249, 0.9191, 0.9135500000000001, 0.908, 0.9026000000000001, 0.8972, 0.892, 0.8868, 0.8818, 0.8768, 0.87195, 0.8671, 0.8624499999999999, 0.8578, 0.8532500000000001, 0.8487, 0.8443, 0.8399, 0.8356, 0.8313, 0.8272, 0.8231, 0.8191, 0.8151, 0.8112, 0.8073, 0.80355, 0.7998, 0.7962, 0.7926, 0.78905, 0.7855, 0.7821, 0.7787, 0.77535, 0.772, 0.76875, 0.7655, 0.7623, 0.7591, 0.756, 0.7529, 0.74985, 0.7468, 0.74385, 0.7409, 0.73805, 0.7352, 0.7323999999999999, 0.7296, 0.7269, 0.7242, 0.7215, 0.7188, 0.7162, 0.7136, 0.71105, 0.7085, 0.706, 0.7035, 0.70105, 0.6986, 0.69625, 0.6939, 0.69155, 0.6892, 0.68695, 0.6847, 0.68245, 0.6802, 0.6779999999999999, 0.6758, 0.6737, 0.6716, 0.6695, 0.6674, 0.66535, 0.6633, 0.6613, 0.6593, 0.65735, 0.6554, 0.6535, 0.6516, 0.6496999999999999, 0.6477999999999999, 0.6459, 0.6439999999999999, 0.6420999999999997, 0.6401999999999999, 0.6383000000000001, 0.6364000000000001, 0.6344999999999996, 0.6325999999999996, 0.6306999999999996, 0.6287999999999996, 0.6269, 0.625, 0.6231, 0.6212, 0.6193, 0.6174, 0.615499999999999, 0.613599999999999, 0.6116999999999999, 0.6097999999999999, 0.6078999999999999, 0.605999999999999, 0.6041000000000007, 0.6021999999999998, 0.6003000000000007, 0.5983999999999998, 0.5965000000000007, 0.5945999999999998, 0.5926999999999989, 0.5907999999999998, 0.5888999999999989, 0.5869999999999997, 0.5850999999999988, 0.5831999999999997, 0.5812999999999988, 0.5793999999999997, 0.5774999999999988, 0.5755999999999979, 0.5737000000000005, 0.5717999999999996, 0.5699000000000005, 0.5679999999999996, 0.5661000000000005, 0.5641999999999996, 0.5622999999999987, 0.5603999999999996, 0.5585000000000022, 0.5565999999999995, 0.5547000000000004, 0.5528000000000013, 0.5509000000000022, 0.5489999999999995, 0.5471000000000004, 0.5452000000000012, 0.5432999999999986, 0.5413999999999994, 0.5395000000000003, 0.5376000000000012, 0.5356999999999985, 0.5337999999999994, 0.5319000000000003, 0.5299999999999976, 0.5280999999999985, 0.5261999999999993, 0.5243000000000002, 0.5223999999999975, 0.5204999999999984, 0.5185999999999993, 0.5166999999999966, 0.5147999999999975, 0.5128999999999984, 0.5109999999999992, 0.5090999999999966, 0.5071999999999974, 0.5052999999999983, 0.5033999999999992, 0.5014999999999965, 0.4995999999999974, 0.4977000000000018, 0.49579999999999913, 0.4939, 0.4920000000000009, 0.49010000000000176, 0.4881999999999991, 0.48629999999999995, 0.48440000000000083, 0.48249999999999815, 0.48059999999999903, 0.4786999999999999, 0.4768000000000008, 0.4748999999999981, 0.472999999999999, 0.47109999999999985, 0.4691999999999972, 0.46729999999999805, 0.4654000000000025, 0.46350000000000335, 0.46160000000000423, 0.4597000000000051]
            self.x = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299]

        elif (self.ecosystem_type == 'EPA Pond' and self.application_method == 'Aerial' and self.drop_size == 'Very Coarse'):
            self.y = self.pond_aerial_c2vc      
            #self.x = [0,1,5,10,25,50,100,150,200,250,300,350,400,450,500,550,600,650,700,750,800,850,900,950,997]
            self.nasae = 3
            self.express_y = [5.622, 5.2035, 4.785, 4.487500000000001, 4.19, 3.9685, 3.747, 3.574, 3.401, 3.262, 3.123, 3.008, 2.893, 2.7925, 2.692, 2.5985, 2.505, 2.418, 2.331, 2.253, 2.175, 2.109, 2.043, 1.9865, 1.93, 1.88, 1.83, 1.784, 1.738, 1.6955, 1.653, 1.6135000000000002, 1.574, 1.5375, 1.501, 1.4674999999999998, 1.434, 1.4035, 1.373, 1.3455, 1.318, 1.2930000000000001, 1.268, 1.2445, 1.221, 1.1995, 1.178, 1.1575, 1.137, 1.1179999999999999, 1.099, 1.0815000000000001, 1.064, 1.0474999999999999, 1.031, 1.0154999999999998, 1.0, 0.986, 0.972, 0.9588, 0.9456, 0.9332, 0.9208, 0.90925, 0.8977, 0.8869, 0.8761, 0.866, 0.8559, 0.8464, 0.8369, 0.82795, 0.819, 0.8105, 0.802, 0.7939, 0.7858, 0.77815, 0.7705, 0.7632, 0.7559, 0.74895, 0.742, 0.73535, 0.7287, 0.7223999999999999, 0.7161, 0.71, 0.7039, 0.6980999999999999, 0.6923, 0.6867000000000001, 0.6811, 0.6757, 0.6703, 0.6651, 0.6599, 0.6548, 0.6497, 0.6448, 0.6399, 0.63515, 0.6304, 0.62575, 0.6211, 0.6166, 0.6121, 0.60775, 0.6034, 0.5991, 0.5948, 0.59065, 0.5865, 0.5824, 0.5783, 0.5743, 0.5703, 0.56645, 0.5626, 0.5588, 0.555, 0.5513, 0.5476, 0.5439499999999999, 0.5403, 0.5367500000000001, 0.5332, 0.5297499999999999, 0.5263, 0.52285, 0.5194, 0.51605, 0.5127, 0.50945, 0.5062, 0.503, 0.4998, 0.49665000000000004, 0.4935, 0.49045, 0.4874, 0.48445, 0.4815, 0.47855000000000003, 0.4756, 0.47275, 0.4699, 0.46709999999999996, 0.4643, 0.4616, 0.4589, 0.45625, 0.4536, 0.451, 0.4484, 0.4459, 0.4434, 0.4409, 0.4384, 0.436, 0.4336, 0.4313, 0.429, 0.42669999999999997, 0.4244, 0.4222, 0.42, 0.41785, 0.4157, 0.41359999999999997, 0.4115, 0.4095, 0.4075, 0.40549999999999997, 0.4035, 0.4016, 0.3997, 0.39785000000000004, 0.396, 0.3942, 0.3924, 0.39065000000000005, 0.3889, 0.3872, 0.3855, 0.38385, 0.3822, 0.3806, 0.379, 0.37745, 0.3759, 0.3744, 0.3729, 0.37145, 0.37, 0.36855, 0.3671, 0.36575, 0.3644, 0.36305, 0.3617, 0.36035000000000006, 0.359, 0.35765000000000013, 0.35630000000000006, 0.3549499999999999, 0.35360000000000014, 0.3522500000000002, 0.3509, 0.3495499999999998, 0.3482000000000003, 0.3468500000000003, 0.3454999999999999, 0.34414999999999996, 0.3428, 0.3414500000000005, 0.3401000000000005, 0.3387500000000001, 0.33740000000000014, 0.3360500000000002, 0.3346999999999998, 0.33335000000000026, 0.33199999999999985, 0.33065000000000033, 0.3293000000000008, 0.3279500000000004, 0.3266, 0.3252500000000005, 0.3239000000000001, 0.32255000000000056, 0.32120000000000015, 0.31984999999999975, 0.3185000000000002, 0.3171499999999998, 0.3158000000000012, 0.3144500000000008, 0.3131000000000004, 0.31175000000000086, 0.31040000000000045, 0.30905000000000005, 0.30770000000000053, 0.3063500000000001, 0.3049999999999997, 0.3036499999999993, 0.3023000000000007, 0.3009500000000003, 0.29959999999999987, 0.29824999999999946, 0.29689999999999905, 0.2955500000000004, 0.2942000000000018, 0.2928500000000014, 0.291500000000001, 0.2901500000000006, 0.28880000000000017, 0.28745000000000154, 0.28610000000000113, 0.2847500000000007, 0.2834000000000003, 0.2820499999999999, 0.2807000000000013, 0.2793500000000009, 0.27800000000000047, 0.27665000000000006, 0.27529999999999966, 0.273950000000001, 0.2726000000000006, 0.2712500000000002, 0.2698999999999998, 0.2685499999999994, 0.26720000000000077, 0.26585000000000214, 0.26450000000000173, 0.2631500000000013, 0.2618000000000009, 0.2604500000000005, 0.2591000000000019, 0.2577500000000015, 0.25640000000000107, 0.25505000000000067, 0.25370000000000026, 0.25235000000000163, 0.2510000000000012, 0.24965000000000082, 0.2483000000000004, 0.24695000000000178, 0.2455999999999996, 0.24425000000000097, 0.24289999999999878, 0.2415500000000037, 0.24020000000000152, 0.2388500000000029, 0.2375000000000007, 0.23615000000000208, 0.2347999999999999, 0.23345000000000127, 0.23209999999999908, 0.23075000000000045, 0.22939999999999827, 0.22804999999999964]
            self.x = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299]

        elif (self.ecosystem_type == 'EPA Pond' and self.application_method == 'Ground' and self.drop_size == 'Fine' and self.boom_height == 'Low'):
            self.y = self.pond_ground_low_vf2f
            #self.x = [0,1,5,10,25,50,100,150,200,250,300,350,400,450,500,550,600,650,700,750,800,850,900,950,997]
            self.nasae = 4
            self.express_y = [1.549, 1.3995, 1.25, 1.1684999999999999, 1.087, 1.0335, 0.98, 0.9402999999999999, 0.9006, 0.8693, 0.838, 0.8122, 0.7864, 0.7645, 0.7426, 0.72365, 0.7047, 0.68805, 0.6714, 0.65655, 0.6417, 0.62835, 0.615, 0.6029, 0.5908, 0.57975, 0.5687, 0.55855, 0.5484, 0.5389999999999999, 0.5296, 0.5208999999999999, 0.5122, 0.5041, 0.496, 0.48845, 0.4809, 0.4738, 0.4667, 0.46005, 0.4534, 0.44715000000000005, 0.4409, 0.43495, 0.429, 0.4234, 0.4178, 0.4125, 0.4072, 0.40215, 0.3971, 0.3923, 0.3875, 0.3829, 0.3783, 0.37395, 0.3696, 0.36545, 0.3613, 0.3573, 0.3533, 0.34945000000000004, 0.3456, 0.34195, 0.3383, 0.3348, 0.3313, 0.32794999999999996, 0.3246, 0.32135, 0.3181, 0.31495, 0.3118, 0.3088, 0.3058, 0.3029, 0.3, 0.2972, 0.2944, 0.29169999999999996, 0.289, 0.2864, 0.2838, 0.2813, 0.2788, 0.27635, 0.2739, 0.27154999999999996, 0.2692, 0.2669, 0.2646, 0.26239999999999997, 0.2602, 0.25805, 0.2559, 0.2538, 0.2517, 0.24969999999999998, 0.2477, 0.24575, 0.2438, 0.2419, 0.24, 0.23815, 0.2363, 0.2345, 0.2327, 0.23095, 0.2292, 0.22749999999999998, 0.2258, 0.22415000000000002, 0.2225, 0.22089999999999999, 0.2193, 0.2177, 0.2161, 0.2146, 0.2131, 0.2116, 0.2101, 0.20865, 0.2072, 0.20575, 0.2043, 0.20295000000000002, 0.2016, 0.20024999999999998, 0.1989, 0.19755, 0.1962, 0.19495, 0.1937, 0.19240000000000002, 0.1911, 0.1899, 0.1887, 0.1875, 0.1863, 0.1851, 0.1839, 0.18275000000000002, 0.1816, 0.1805, 0.1794, 0.17830000000000001, 0.1772, 0.17615, 0.1751, 0.17404999999999998, 0.173, 0.17195, 0.1709, 0.1699, 0.1689, 0.1679, 0.1669, 0.16595, 0.165, 0.16405, 0.1631, 0.16215000000000002, 0.1612, 0.1603, 0.1594, 0.15849999999999997, 0.1576, 0.15675, 0.1559, 0.15505000000000002, 0.1542, 0.15335, 0.1525, 0.15165, 0.1508, 0.15, 0.1492, 0.1484, 0.1476, 0.14685, 0.1461, 0.14529999999999998, 0.1445, 0.14375, 0.143, 0.14225, 0.1415, 0.14079999999999998, 0.1401, 0.1394, 0.1387, 0.138, 0.1373, 0.1366, 0.1359, 0.1352, 0.1345, 0.13385000000000002, 0.1332, 0.13255000000000003, 0.13190000000000002, 0.13125, 0.13060000000000005, 0.12995, 0.12930000000000003, 0.12865000000000004, 0.128, 0.12734999999999996, 0.12670000000000003, 0.1260500000000001, 0.12540000000000007, 0.12475000000000003, 0.1241000000000001, 0.12345000000000006, 0.12280000000000002, 0.12214999999999998, 0.12149999999999994, 0.1208499999999999, 0.12019999999999986, 0.11955000000000005, 0.11890000000000023, 0.11825000000000019, 0.11760000000000015, 0.11695000000000011, 0.11630000000000007, 0.11565000000000003, 0.11500000000000021, 0.11434999999999995, 0.11370000000000013, 0.11305000000000032, 0.11240000000000006, 0.11175000000000024, 0.11109999999999998, 0.11045000000000016, 0.1097999999999999, 0.10915000000000008, 0.10849999999999982, 0.10785, 0.10719999999999974, 0.10655000000000037, 0.1059000000000001, 0.10525000000000029, 0.10460000000000003, 0.10395000000000021, 0.10330000000000039, 0.10265000000000013, 0.10200000000000031, 0.10135000000000005, 0.10070000000000023, 0.10004999999999997, 0.09940000000000015, 0.0987499999999999, 0.09810000000000008, 0.09744999999999981, 0.09680000000000044, 0.09615000000000018, 0.09550000000000036, 0.09485000000000054, 0.09419999999999984, 0.09354999999999958, 0.0929000000000002, 0.09224999999999994, 0.09160000000000057, 0.09095000000000031, 0.09030000000000005, 0.08965000000000067, 0.08900000000000041, 0.08835000000000015, 0.08769999999999989, 0.08705000000000052, 0.08640000000000025, 0.08574999999999999, 0.08509999999999973, 0.08445000000000036, 0.0838000000000001, 0.08314999999999984, 0.08249999999999957, 0.0818500000000002, 0.08119999999999994, 0.08055000000000057, 0.0799000000000003, 0.07925000000000004, 0.07860000000000067, 0.07795000000000041, 0.07730000000000015, 0.07664999999999988, 0.07600000000000051, 0.07535000000000025, 0.07469999999999999, 0.07404999999999973, 0.07340000000000035, 0.07275000000000009, 0.07210000000000072, 0.07144999999999957, 0.0708000000000002, 0.07015000000000082, 0.06950000000000056, 0.0688500000000003, 0.06820000000000004, 0.06755000000000067]
            self.x = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299]

        elif (self.ecosystem_type == 'EPA Pond' and self.application_method == 'Ground' and self.drop_size == 'Medium' and self.boom_height == 'Low'): 
            self.y = self.pond_ground_low_f2m
            #self.x = [0,1,5,10,25,50,100,150,200,250,300,350,400,450,500,550,600,650,700,750,800,850,900,950,997]
            self.nasae = 6
            self.express_y = [0.6124, 0.5698000000000001, 0.5272, 0.5023, 0.4774, 0.4598, 0.4422, 0.42845, 0.4147, 0.40345, 0.3922, 0.3826, 0.373, 0.36465000000000003, 0.3563, 0.34895, 0.3416, 0.335, 0.3284, 0.32245, 0.3165, 0.31105, 0.3056, 0.3006, 0.2956, 0.29095, 0.2863, 0.28205, 0.2778, 0.2738, 0.2698, 0.26605, 0.2623, 0.25880000000000003, 0.2553, 0.252, 0.2487, 0.24559999999999998, 0.2425, 0.23954999999999999, 0.2366, 0.23385, 0.2311, 0.22845, 0.2258, 0.22325, 0.2207, 0.2183, 0.2159, 0.2136, 0.2113, 0.2091, 0.2069, 0.20479999999999998, 0.2027, 0.2007, 0.1987, 0.19674999999999998, 0.1948, 0.19295, 0.1911, 0.18935, 0.1876, 0.18585000000000002, 0.1841, 0.18245, 0.1808, 0.1792, 0.1776, 0.1761, 0.1746, 0.1731, 0.1716, 0.17015, 0.1687, 0.1673, 0.1659, 0.1646, 0.1633, 0.162, 0.1607, 0.1594, 0.1581, 0.15689999999999998, 0.1557, 0.1545, 0.1533, 0.15215, 0.151, 0.14989999999999998, 0.1488, 0.1477, 0.1466, 0.14555, 0.1445, 0.1435, 0.1425, 0.14150000000000001, 0.1405, 0.1395, 0.1385, 0.13755, 0.1366, 0.1357, 0.1348, 0.13390000000000002, 0.133, 0.1321, 0.1312, 0.13035000000000002, 0.1295, 0.1287, 0.1279, 0.1271, 0.1263, 0.1255, 0.1247, 0.12390000000000001, 0.1231, 0.12235, 0.1216, 0.12085, 0.1201, 0.1194, 0.1187, 0.118, 0.1173, 0.11660000000000001, 0.1159, 0.1152, 0.1145, 0.11385, 0.1132, 0.11255, 0.1119, 0.11130000000000001, 0.1107, 0.11005000000000001, 0.1094, 0.10880000000000001, 0.1082, 0.1076, 0.107, 0.10644999999999999, 0.1059, 0.1053, 0.1047, 0.10414999999999999, 0.1036, 0.10305, 0.1025, 0.10195, 0.1014, 0.1009, 0.1004, 0.09987499999999999, 0.09935, 0.09884499999999999, 0.09834, 0.09784, 0.09734, 0.096855, 0.09637, 0.09589, 0.09541, 0.09494, 0.09447, 0.094005, 0.09354, 0.093085, 0.09263, 0.092185, 0.09174, 0.091305, 0.09087, 0.09044, 0.09001, 0.089585, 0.08916, 0.088745, 0.08833, 0.08792, 0.08751, 0.08710999999999999, 0.08671, 0.08631, 0.08591, 0.08552499999999999, 0.08514, 0.084755, 0.08437, 0.083995, 0.08362, 0.08324999999999999, 0.08288, 0.082515, 0.08215, 0.08179, 0.08143, 0.08107, 0.08071, 0.08035, 0.07999, 0.07963, 0.07927000000000001, 0.07890999999999998, 0.07855000000000001, 0.07819000000000004, 0.07783000000000001, 0.07747000000000004, 0.07711000000000001, 0.07674999999999998, 0.07638999999999996, 0.07603000000000004, 0.07567000000000002, 0.07530999999999999, 0.07495000000000007, 0.07459000000000005, 0.07423000000000002, 0.07386999999999999, 0.07350999999999996, 0.07315000000000005, 0.07279000000000013, 0.07243, 0.07207000000000008, 0.07171000000000016, 0.0713499999999998, 0.07098999999999989, 0.07062999999999997, 0.07027000000000005, 0.06991000000000014, 0.06955, 0.06919000000000008, 0.06883000000000017, 0.06847000000000003, 0.06810999999999989, 0.06774999999999998, 0.06739000000000006, 0.06703000000000015, 0.06667000000000001, 0.06631000000000009, 0.06595000000000018, 0.06558999999999982, 0.0652299999999999, 0.06486999999999998, 0.06451000000000007, 0.06415000000000015, 0.06379000000000001, 0.06343000000000032, 0.06306999999999974, 0.06271000000000004, 0.062349999999999905, 0.06199000000000021, 0.061630000000000074, 0.061269999999999936, 0.06091000000000024, 0.06054999999999966, 0.060189999999999966, 0.05982999999999983, 0.059470000000000134, 0.059109999999999996, 0.0587500000000003, 0.058390000000000164, 0.058030000000000026, 0.05767000000000033, 0.05730999999999975, 0.056950000000000056, 0.05658999999999992, 0.056230000000000224, 0.055870000000000086, 0.05551000000000039, 0.055150000000000254, 0.05478999999999967, 0.05442999999999998, 0.05406999999999984, 0.053710000000000147, 0.05335000000000001, 0.052990000000000315, 0.05263000000000018, 0.05227000000000004, 0.051910000000000345, 0.05154999999999976, 0.05119000000000007, 0.05082999999999993, 0.05047000000000024, 0.0501100000000001, 0.04974999999999996, 0.04939000000000027, 0.049029999999999685, 0.04866999999999999, 0.04830999999999985, 0.04795000000000016, 0.04759000000000002, 0.04723000000000033, 0.04687000000000019, 0.04650999999999961, 0.04614999999999991, 0.04579000000000022, 0.045430000000000526, 0.04506999999999994]
            self.x = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299]

        elif (self.ecosystem_type == 'EPA Pond' and self.application_method == 'Ground' and self.drop_size == 'Fine' and self.boom_height == 'High'):
            self.y = self.pond_ground_high_vf2f
            #self.x = [0,1,5,10,25,50,100,150,200,250,300,350,400,450,500,550,600,650,700,750,800,850,900,950,997]
            self.nasae = 5
            self.express_y = [4.251, 3.838, 3.425, 3.1805, 2.936, 2.7715, 2.607, 2.4855, 2.364, 2.2685, 2.173, 2.0949999999999998, 2.017, 1.9514999999999998, 1.886, 1.8295, 1.773, 1.7235, 1.674, 1.63, 1.586, 1.5470000000000002, 1.508, 1.4725000000000001, 1.437, 1.4045, 1.372, 1.343, 1.314, 1.287, 1.26, 1.2349999999999999, 1.21, 1.1865, 1.163, 1.1415000000000002, 1.12, 1.1, 1.08, 1.061, 1.042, 1.0245, 1.007, 0.9904999999999999, 0.974, 0.95835, 0.9427, 0.92795, 0.9132, 0.89925, 0.8853, 0.87205, 0.8588, 0.84625, 0.8337, 0.8218, 0.8099, 0.7985, 0.7871, 0.7763, 0.7655, 0.7552, 0.7449, 0.735, 0.7251, 0.7157, 0.7063, 0.69725, 0.6882, 0.6795500000000001, 0.6709, 0.66265, 0.6544, 0.64645, 0.6385, 0.6308499999999999, 0.6232, 0.61585, 0.6085, 0.60145, 0.5944, 0.5876, 0.5808, 0.5742499999999999, 0.5677, 0.5614, 0.5551, 0.549, 0.5429, 0.53705, 0.5312, 0.5255000000000001, 0.5198, 0.5143500000000001, 0.5089, 0.5036, 0.4983, 0.49315, 0.488, 0.48305, 0.4781, 0.47330000000000005, 0.4685, 0.46385, 0.4592, 0.4547, 0.4502, 0.44584999999999997, 0.4415, 0.4373, 0.4331, 0.429, 0.4249, 0.4209, 0.4169, 0.41305000000000003, 0.4092, 0.40545, 0.4017, 0.39805, 0.3944, 0.39085, 0.3873, 0.38385, 0.3804, 0.37705, 0.3737, 0.37045, 0.3672, 0.36405, 0.3609, 0.3578, 0.3547, 0.3517, 0.3487, 0.34575, 0.3428, 0.33995, 0.3371, 0.33435000000000004, 0.3316, 0.32889999999999997, 0.3262, 0.32355, 0.3209, 0.3183, 0.3157, 0.3132, 0.3107, 0.30825, 0.3058, 0.3034, 0.301, 0.29869999999999997, 0.2964, 0.29410000000000003, 0.2918, 0.28959999999999997, 0.2874, 0.2852, 0.283, 0.2809, 0.2788, 0.2767, 0.2746, 0.2726, 0.2706, 0.2686, 0.2666, 0.2647, 0.2628, 0.2609, 0.259, 0.25715, 0.2553, 0.25345, 0.2516, 0.24985, 0.2481, 0.24635, 0.2446, 0.2429, 0.2412, 0.23954999999999999, 0.2379, 0.2363, 0.2347, 0.2331, 0.2315, 0.22995, 0.2284, 0.22685, 0.2253, 0.2238, 0.2223, 0.22085, 0.2194, 0.21795, 0.2165, 0.21504999999999996, 0.21359999999999998, 0.21215, 0.21069999999999994, 0.20925000000000005, 0.20779999999999998, 0.20634999999999992, 0.20489999999999997, 0.2034499999999999, 0.20199999999999996, 0.20054999999999978, 0.19910000000000005, 0.19764999999999988, 0.19619999999999993, 0.19474999999999976, 0.1932999999999998, 0.19185000000000008, 0.1903999999999999, 0.18894999999999973, 0.1875, 0.18604999999999983, 0.18459999999999965, 0.18314999999999948, 0.18169999999999975, 0.18025000000000002, 0.17879999999999985, 0.17735000000000012, 0.17589999999999995, 0.17444999999999977, 0.1729999999999996, 0.17154999999999987, 0.1700999999999997, 0.16864999999999952, 0.1671999999999998, 0.16575000000000006, 0.1642999999999999, 0.16284999999999972, 0.16139999999999954, 0.15994999999999937, 0.15850000000000009, 0.1570499999999999, 0.15559999999999974, 0.15414999999999957, 0.1526999999999994, 0.15124999999999922, 0.14979999999999905, 0.14834999999999976, 0.1468999999999996, 0.1454499999999994, 0.14399999999999924, 0.14254999999999907, 0.14109999999999978, 0.1396499999999996, 0.13820000000000032, 0.13675000000000015, 0.13529999999999998, 0.1338499999999998, 0.13239999999999963, 0.13094999999999946, 0.12949999999999928, 0.12805, 0.12659999999999982, 0.12514999999999965, 0.12369999999999948, 0.1222499999999993, 0.12079999999999913, 0.11934999999999896, 0.11789999999999967, 0.1164499999999995, 0.11499999999999932, 0.11354999999999915, 0.11209999999999987, 0.11064999999999969, 0.10919999999999952, 0.10774999999999935, 0.10629999999999917, 0.104849999999999, 0.10339999999999883, 0.10195000000000043, 0.10050000000000026, 0.09905000000000008, 0.09759999999999991, 0.09614999999999974, 0.09469999999999956, 0.09324999999999939, 0.09179999999999922, 0.09034999999999904, 0.08889999999999887, 0.0874499999999987, 0.08599999999999852, 0.08454999999999835, 0.08309999999999818, 0.08164999999999978, 0.0801999999999996, 0.07874999999999943, 0.07729999999999926, 0.07584999999999908, 0.07439999999999891, 0.07294999999999874, 0.07149999999999856, 0.07004999999999839]
            self.x = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299]
        elif (self.ecosystem_type == 'EPA Pond' and self.application_method == 'Ground' and self.drop_size == 'Medium' and self.boom_height == 'High'): 
            self.y = self.pond_ground_high_f2m
            #self.x = [0,1,5,10,25,50,100,150,200,250,300,350,400,450,500,550,600,650,700,750,800,850,900,950,997]
            self.nasae = 7
            self.express_y = [0.9842, 0.91275, 0.8413, 0.79925, 0.7572, 0.7275, 0.6978, 0.67465, 0.6515, 0.6325000000000001, 0.6135, 0.5974, 0.5813, 0.56735, 0.5534, 0.54105, 0.5287, 0.5177, 0.5067, 0.49675, 0.4868, 0.4777, 0.4686, 0.46030000000000004, 0.452, 0.44435, 0.4367, 0.4296, 0.4225, 0.4159, 0.4093, 0.40315, 0.397, 0.3912, 0.3854, 0.37995, 0.3745, 0.3694, 0.3643, 0.35945000000000005, 0.3546, 0.35, 0.3454, 0.34109999999999996, 0.3368, 0.33265, 0.3285, 0.32455, 0.3206, 0.31684999999999997, 0.3131, 0.30955, 0.306, 0.30255, 0.2991, 0.29585, 0.2926, 0.28945, 0.2863, 0.2833, 0.2803, 0.2774, 0.2745, 0.2717, 0.2689, 0.26625, 0.2636, 0.261, 0.2584, 0.25595, 0.2535, 0.2511, 0.2487, 0.24635, 0.244, 0.24180000000000001, 0.2396, 0.23745, 0.2353, 0.23320000000000002, 0.2311, 0.22905, 0.227, 0.22505, 0.2231, 0.2212, 0.2193, 0.2175, 0.2157, 0.2139, 0.2121, 0.21035, 0.2086, 0.20695000000000002, 0.2053, 0.20365, 0.202, 0.20040000000000002, 0.1988, 0.1973, 0.1958, 0.1943, 0.1928, 0.1913, 0.1898, 0.1884, 0.187, 0.1856, 0.1842, 0.18285, 0.1815, 0.1802, 0.1789, 0.17765, 0.1764, 0.17515, 0.1739, 0.17265, 0.1714, 0.17020000000000002, 0.169, 0.16785, 0.1667, 0.1656, 0.1645, 0.1634, 0.1623, 0.1612, 0.1601, 0.15905, 0.158, 0.15695, 0.1559, 0.1549, 0.1539, 0.15295, 0.152, 0.151, 0.15, 0.14905000000000002, 0.1481, 0.1472, 0.1463, 0.1454, 0.1445, 0.1436, 0.1427, 0.14184999999999998, 0.141, 0.14015, 0.1393, 0.13845000000000002, 0.1376, 0.1368, 0.136, 0.1352, 0.1344, 0.13365, 0.1329, 0.1321, 0.1313, 0.13055, 0.1298, 0.1291, 0.1284, 0.12764999999999999, 0.1269, 0.1262, 0.1255, 0.1248, 0.1241, 0.12340000000000001, 0.1227, 0.12204999999999999, 0.1214, 0.12075, 0.1201, 0.11945, 0.1188, 0.11815, 0.1175, 0.1169, 0.1163, 0.1157, 0.1151, 0.11449999999999999, 0.1139, 0.1133, 0.1127, 0.1121, 0.1115, 0.11095, 0.1104, 0.10985, 0.1093, 0.10875, 0.1082, 0.10765, 0.1071, 0.10655, 0.106, 0.10544999999999999, 0.10490000000000002, 0.10435, 0.1038, 0.10324999999999995, 0.10269999999999996, 0.10214999999999996, 0.10160000000000002, 0.10104999999999997, 0.10050000000000003, 0.09994999999999998, 0.09939999999999993, 0.09885, 0.09829999999999994, 0.09774999999999989, 0.09719999999999995, 0.0966499999999999, 0.09609999999999985, 0.0955499999999998, 0.09499999999999997, 0.09445000000000014, 0.0939000000000001, 0.09335000000000004, 0.0928, 0.09224999999999994, 0.09169999999999989, 0.09115000000000006, 0.09060000000000001, 0.09004999999999996, 0.08949999999999991, 0.08894999999999986, 0.08839999999999981, 0.08784999999999976, 0.08729999999999993, 0.08674999999999988, 0.08619999999999983, 0.08564999999999978, 0.08509999999999973, 0.08454999999999968, 0.08399999999999963, 0.08344999999999958, 0.08289999999999953, 0.08234999999999992, 0.08180000000000032, 0.08125000000000027, 0.08070000000000022, 0.08015000000000017, 0.07960000000000012, 0.07905000000000006, 0.07850000000000001, 0.07794999999999996, 0.07739999999999991, 0.07684999999999986, 0.07629999999999981, 0.07574999999999976, 0.07520000000000016, 0.0746500000000001, 0.07410000000000005, 0.07355, 0.07299999999999995, 0.0724499999999999, 0.07189999999999985, 0.0713499999999998, 0.07079999999999975, 0.0702499999999997, 0.06969999999999965, 0.0691499999999996, 0.06859999999999955, 0.06804999999999994, 0.0674999999999999, 0.06695000000000029, 0.06639999999999979, 0.06585000000000019, 0.06529999999999969, 0.06475000000000009, 0.06419999999999959, 0.06364999999999998, 0.06309999999999949, 0.06254999999999988, 0.06199999999999939, 0.06144999999999978, 0.06089999999999929, 0.06034999999999968, 0.05979999999999919, 0.05924999999999958, 0.058699999999999086, 0.05814999999999948, 0.057599999999999874, 0.05705000000000027, 0.05649999999999977, 0.055950000000000166, 0.05540000000000056, 0.054850000000000065, 0.05430000000000046, 0.053749999999999964, 0.05320000000000036, 0.052649999999999864, 0.05210000000000026, 0.05154999999999976]
            self.x = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299]

        elif (self.ecosystem_type == 'EPA Pond' and self.application_method == 'Orchard/Airblast' and self.orchard_type == 'Sparse'):
            self.y = self.pond_airblast_sparse
            #self.x = [0,1,5,10,25,50,100,150,200,250,300,350,400,450,500,550,600,650,700,750,800,850,900,950,997]
            self.nasae = 9
            self.express_y = [1.642, 1.4714999999999998, 1.301, 1.184, 1.067, 0.9834, 0.8998, 0.8373, 0.7748, 0.7266, 0.6784, 0.64025, 0.6021, 0.57125, 0.5404, 0.515, 0.4896, 0.4684, 0.4472, 0.4292, 0.4112, 0.39585000000000004, 0.3805, 0.36719999999999997, 0.3539, 0.3423, 0.3307, 0.3205, 0.3103, 0.30125, 0.2922, 0.28415, 0.2761, 0.26890000000000003, 0.2617, 0.2552, 0.2487, 0.24280000000000002, 0.2369, 0.23155, 0.2262, 0.2213, 0.2164, 0.21195, 0.2075, 0.20334999999999998, 0.1992, 0.1954, 0.1916, 0.1881, 0.1846, 0.18135, 0.1781, 0.17504999999999998, 0.172, 0.16915, 0.1663, 0.16365000000000002, 0.161, 0.15855, 0.1561, 0.15375, 0.1514, 0.1492, 0.147, 0.14495, 0.1429, 0.1409, 0.1389, 0.13705, 0.1352, 0.13345, 0.1317, 0.13005, 0.1284, 0.1268, 0.1252, 0.1237, 0.1222, 0.1208, 0.1194, 0.118, 0.1166, 0.1153, 0.114, 0.11275, 0.1115, 0.11035, 0.1092, 0.10805000000000001, 0.1069, 0.1058, 0.1047, 0.10364999999999999, 0.1026, 0.10155, 0.1005, 0.099555, 0.09861, 0.09767500000000001, 0.09674, 0.095835, 0.09493, 0.09406500000000001, 0.0932, 0.09236, 0.09152, 0.090715, 0.08991, 0.08913, 0.08835, 0.087595, 0.08684, 0.08610999999999999, 0.08538, 0.084675, 0.08397, 0.08329, 0.08261, 0.081945, 0.08128, 0.08064, 0.08, 0.07938, 0.07876, 0.078155, 0.07755, 0.076965, 0.07638, 0.075815, 0.07525, 0.074695, 0.07414, 0.073605, 0.07307, 0.072545, 0.07202, 0.071515, 0.07101, 0.070515, 0.07002, 0.06953999999999999, 0.06906, 0.06859, 0.06812, 0.067665, 0.06721, 0.066765, 0.06632, 0.065885, 0.06545, 0.06503, 0.06461, 0.064195, 0.06378, 0.063375, 0.06297, 0.06258, 0.06219, 0.061805, 0.06142, 0.061045, 0.06067, 0.060305, 0.05994, 0.05958, 0.05922, 0.058870000000000006, 0.05852, 0.05818, 0.05784, 0.057505, 0.05717, 0.05684, 0.05651, 0.056190000000000004, 0.05587, 0.055555, 0.05524, 0.054935, 0.05463, 0.05433, 0.05403, 0.053735000000000005, 0.05344, 0.05315, 0.05286, 0.052575, 0.05229, 0.052015000000000006, 0.05174, 0.051465, 0.05119, 0.050925, 0.05066, 0.0504, 0.05014, 0.049879999999999994, 0.04962, 0.04936, 0.0491, 0.048839999999999995, 0.04858, 0.04832, 0.04805999999999999, 0.04780000000000001, 0.04754, 0.04727999999999999, 0.047020000000000006, 0.046760000000000024, 0.046499999999999986, 0.04624, 0.04598000000000002, 0.04571999999999998, 0.04546, 0.04520000000000002, 0.04493999999999998, 0.04468, 0.044420000000000015, 0.04415999999999998, 0.04390000000000005, 0.04364000000000001, 0.043379999999999974, 0.04312000000000005, 0.04286000000000001, 0.04259999999999997, 0.042340000000000044, 0.042080000000000006, 0.04181999999999997, 0.04156000000000004, 0.0413, 0.041039999999999965, 0.04078000000000004, 0.04052, 0.04025999999999996, 0.040000000000000036, 0.03974, 0.03947999999999996, 0.03922000000000003, 0.038960000000000106, 0.03869999999999996, 0.03844000000000003, 0.0381800000000001, 0.037919999999999954, 0.03766000000000003, 0.0374000000000001, 0.03713999999999995, 0.036880000000000024, 0.0366200000000001, 0.03635999999999995, 0.03610000000000002, 0.035840000000000094, 0.035579999999999945, 0.03532000000000002, 0.03506000000000009, 0.03479999999999994, 0.034540000000000015, 0.03428000000000009, 0.03401999999999994, 0.03376000000000001, 0.033500000000000085, 0.033239999999999936, 0.03298000000000001, 0.03272000000000008, 0.03245999999999993, 0.032200000000000006, 0.03194000000000008, 0.03167999999999993, 0.031420000000000003, 0.031160000000000077, 0.030899999999999928, 0.03064, 0.030380000000000074, 0.030119999999999925, 0.029859999999999998, 0.02960000000000007, 0.02933999999999992, 0.029079999999999995, 0.028820000000000068, 0.02856000000000014, 0.028300000000000214, 0.028039999999999843, 0.027779999999999916, 0.02751999999999999, 0.027260000000000062, 0.027000000000000135, 0.026740000000000208, 0.026479999999999837, 0.02621999999999991, 0.025959999999999983, 0.025700000000000056, 0.02544000000000013, 0.025180000000000202, 0.02491999999999983, 0.024659999999999904, 0.024399999999999977, 0.02414000000000005, 0.023880000000000123, 0.023620000000000196, 0.023359999999999825]
            self.x = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299]

        elif (self.ecosystem_type == 'EPA Pond' and self.application_method == 'Orchard/Airblast' and self.orchard_type == 'Vineyard'):
            self.y = self.pond_airblast_vineyard            
            self.express_y = [0.1658, 0.1466, 0.1274, 0.11565, 0.1039, 0.096125, 0.08835, 0.082735, 0.07712, 0.07286, 0.0686, 0.06523999999999999, 0.06188, 0.059149999999999994, 0.05642, 0.054150000000000004, 0.05188, 0.049960000000000004, 0.04804, 0.04639, 0.04474, 0.043300000000000005, 0.04186, 0.040595, 0.03933, 0.038209999999999994, 0.03709, 0.036085, 0.03508, 0.034175, 0.03327, 0.03245, 0.03163, 0.030885, 0.03014, 0.029455000000000002, 0.02877, 0.028145, 0.02752, 0.02694, 0.02636, 0.025825, 0.02529, 0.02479, 0.02429, 0.023825, 0.02336, 0.02293, 0.0225, 0.022095, 0.02169, 0.021310000000000003, 0.02093, 0.020569999999999998, 0.02021, 0.019874999999999997, 0.01954, 0.019225, 0.01891, 0.01861, 0.01831, 0.018025, 0.01774, 0.01747, 0.0172, 0.016945, 0.01669, 0.01645, 0.01621, 0.01598, 0.01575, 0.01553, 0.01531, 0.0151, 0.01489, 0.01469, 0.01449, 0.0143, 0.01411, 0.01393, 0.01375, 0.013575, 0.0134, 0.01323, 0.01306, 0.0129, 0.01274, 0.012584999999999999, 0.01243, 0.012285, 0.01214, 0.011994999999999999, 0.01185, 0.011715, 0.01158, 0.01145, 0.01132, 0.01119, 0.01106, 0.01094, 0.01082, 0.010705, 0.01059, 0.010475, 0.01036, 0.010249999999999999, 0.01014, 0.010034, 0.009928, 0.009826, 0.009724, 0.0096255, 0.009527, 0.0094315, 0.009336, 0.009244, 0.009152, 0.009062500000000001, 0.008973, 0.0088865, 0.0088, 0.008716000000000002, 0.008632, 0.008551, 0.00847, 0.008391, 0.008312, 0.008236, 0.00816, 0.0080855, 0.008011, 0.0079395, 0.007868, 0.007797999999999999, 0.007728, 0.00766, 0.007592, 0.007526, 0.00746, 0.007396, 0.007332, 0.0072695, 0.007207, 0.0071465, 0.007086, 0.007027, 0.006968, 0.0069105, 0.006853, 0.0067975, 0.006742, 0.0066875, 0.006633, 0.00658, 0.006527, 0.006475, 0.006423, 0.006373, 0.006323, 0.0062734999999999996, 0.006224, 0.0061765, 0.006129, 0.006082000000000001, 0.006035, 0.0059895, 0.005944, 0.0058995, 0.005855, 0.0058119999999999995, 0.005769, 0.0057265, 0.005684, 0.0056425, 0.005601, 0.005561, 0.005521, 0.0054815, 0.005442, 0.0054035, 0.005365, 0.005327, 0.005289, 0.005252, 0.005215, 0.005179, 0.005143, 0.005108, 0.005073, 0.0050385, 0.005004, 0.0049705, 0.004937, 0.004904, 0.004871, 0.004838500000000001, 0.004806, 0.0047745, 0.004743, 0.004711499999999999, 0.004679999999999999, 0.0046485, 0.004616999999999998, 0.004585499999999999, 0.004553999999999999, 0.004522499999999995, 0.0044909999999999985, 0.004459499999999998, 0.0044279999999999944, 0.004396499999999998, 0.004365000000000001, 0.004333499999999997, 0.004301999999999993, 0.0042704999999999965, 0.004238999999999993, 0.004207499999999996, 0.004175999999999999, 0.004144499999999995, 0.004112999999999992, 0.004081499999999995, 0.004049999999999991, 0.004018499999999994, 0.0039869999999999975, 0.003955500000000001, 0.003923999999999997, 0.003892499999999993, 0.0038609999999999894, 0.0038294999999999996, 0.003797999999999996, 0.003766499999999992, 0.0037349999999999883, 0.0037034999999999846, 0.003671999999999981, 0.003640499999999977, 0.003609000000000001, 0.0035774999999999973, 0.0035459999999999936, 0.00351449999999999, 0.003482999999999986, 0.0034514999999999824, 0.0034199999999999925, 0.0033884999999999887, 0.003356999999999985, 0.0033254999999999812, 0.0032939999999999775, 0.0032624999999999876, 0.0032309999999999978, 0.003199499999999994, 0.0031679999999999903, 0.0031364999999999726, 0.0031049999999999967, 0.0030735000000000068, 0.003041999999999989, 0.0030104999999999993, 0.0029789999999999817, 0.002947499999999992, 0.002916000000000002, 0.0028844999999999843, 0.0028529999999999944, 0.002821499999999977, 0.002789999999999987, 0.0027584999999999693, 0.0027269999999999794, 0.0026954999999999896, 0.002663999999999972, 0.002632499999999982, 0.0026009999999999645, 0.0025694999999999746, 0.002537999999999957, 0.002506499999999967, 0.0024749999999999772, 0.0024434999999999873, 0.0024119999999999975, 0.00238049999999998, 0.00234899999999999, 0.0023175, 0.0022859999999999825, 0.0022544999999999926, 0.002222999999999975, 0.002191499999999985, 0.0021599999999999675, 0.0021284999999999776, 0.0020969999999999878, 0.00206549999999997, 0.0020339999999999803, 0.0020024999999999626, 0.0019709999999999728, 0.0019394999999999551, 0.0019079999999999653, 0.0018764999999999754, 0.0018449999999999578, 0.001813499999999968, 0.0017819999999999503, 0.0017504999999999882, 0.0017189999999999983, 0.0016874999999999807, 0.0016559999999999908, 0.0016244999999999732, 0.0015929999999999833, 0.0015614999999999657]
            self.x = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299]
            self.nasae =  8
    #     elif (self.ecosystem_type == 'Terrestrial' and self.application_method == 'Aerial' and self.drop_size == 'Fine'):
    #         self.y = self.terr_aerial_vf2f
    #         self.x = [0,1,5,10,25,50,100,150,200,250,300,350,400,450,500,550,600,650,700,750,800,850,900,950,997]
    #     elif (self.ecosystem_type == 'Terrestrial' and self.application_method == 'Aerial' and self.drop_size == 'Medium'):
    #         self.y = self.terr_aerial_f2m
    #         self.x = [0,1,5,10,25,50,100,150,200,250,300,350,400,450,500,550,600,650,700,750,800,850,900,950,997]
    #     elif (self.ecosystem_type == 'Terrestrial' and self.application_method == 'Aerial' and self.drop_size == 'Coarse'):
    #         self.y = self.terr_aerial_m2c   
    #         self.x = [0,1,5,10,25,50,100,150,200,250,300,350,400,450,500,550,600,650,700,750,800,850,900,950,997]
    #     elif (self.ecosystem_type == 'Terrestrial' and self.application_method == 'Aerial' and self.drop_size == 'Very Coarse'):
    #         self.y = self.terr_aerial_c2vc   
    #         self.x = [0,1,5,10,25,50,100,150,200,250,300,350,400,450,500,550,600,650,700,750,800,850,900,950,997]
    #     elif (self.ecosystem_type == 'Terrestrial' and self.application_method == 'Ground' and self.drop_size == 'Fine'):
    #         self.y = self.terr_ground_vf2f
    #         self.x = [0,1,5,10,25,50,100,150,200,250,300,350,400,450,500,550,600,650,700,750,800,850,900,950,997]
    #     elif (self.ecosystem_type == 'Terrestrial' and self.application_method == 'Ground' and self.drop_size == 'Medium'): 
    #         self.y = self.terr_ground_f2m  
    #         self.x = [0,1,5,10,25,50,100,150,200,250,300,350,400,450,500,550,600,650,700,750,800,850,900,950,997]
    #     elif (self.ecosystem_type == 'EPA Pond' and self.application_method == 'Orchard/Airblast' and self.orchard_type == 'Normal'):
    #         self.y = self.pond_airblast_normal
    #         self.x = [0,1,5,10,25,50,100,150,200,250,300,350,400,450,500,550,600,650,700,750,800,850,900,950,997]
    #     elif (self.ecosystem_type == 'EPA Pond' and self.application_method == 'Orchard/Airblast' and self.orchard_type == 'Dense'):
    #         self.y = self.pond_airblast_dense                        
    #         self.x = [0,1,5,10,25,50,100,150,200,250,300,350,400,450,500,550,600,650,700,750,800,850,900,950,997]
            #     elif (self.ecosystem_type == 'EPA Pond' and self.application_method == 'Orchard/Airblast' and self.orchard_type == 'Orchard'):
    #         self.y = pond_airblast_orchard
    #         self.x = [0,1,5,10,25,50,100,150,200,250,300,350,400,450,500,550,600,650,700,750,800,850,900,950,997]
    #     elif (self.ecosystem_type == 'Terrestrial' and self.application_method == 'Orchard/Airblast' and self.orchard_type == 'Normal'):
    #         self.y = self.terr_airblast_normal
    #         self.x = [0,1,5,10,25,50,100,150,200,250,300,350,400,450,500,600,700,800,900,997]            
    #     elif (self.ecosystem_type == 'Terrestrial' and self.application_method == 'Orchard/Airblast' and self.orchard_type == 'Dense'):
    #         self.y = self.terr_airblast_dense
    #         self.x = [0,1,5,10,25,50,100,150,200,250,300,350,400,450,500,600,700,800,900,997]
    #     elif (self.ecosystem_type == 'Terrestrial' and self.application_method == 'Orchard/Airblast' and self.orchard_type == 'Sparse'):
    #         self.y = self.terr_airblast_sparse
    #         self.x = [0,1,5,10,25,50,100,150,200,250,300,350,400,450,500,600,700,800,900,997]
    #     elif (self.ecosystem_type == 'Terrestrial' and self.application_method == 'Orchard/Airblast' and self.orchard_type == 'Vineyard'):
    #         self.y = self.terr_airblast_vineyard
    #         self.x = [0,1,5,10,25,50,100,150,200,250,300,350,400,450,500,600,700,800,900,997]
    #     elif (self.ecosystem_type == 'Terrestrial' and self.application_method == 'Orchard/Airblast' and self.orchard_type == 'Orchard'):
    #         self.y = self.terr_airblast_orchard
    #         self.x = [0,1,5,10,25,50,100,150,200,250,300,350,400,450,500,600,700,800,900,997]
    #         self.z = 4
        else:
             #print 2
            self.y = 3
            #print self.nasae
    def express_extrapolate_f(self, y, nasae, distance):
       # XV = np.array([X0, X1, X2, X3, X4, X5, X6, X7, X8, X9])
        
        #NASAE1=int(self.nasae)-1
        N=max(0,min(9,(self.nasae-1)))
        I=max(0,min(99,int(0.5*int(self.distance))+1))
        YM=2.0*(I-1)
        YP=2.0*(I)
        self.init_avg_dep_foa=0.5*(self.y[I]*(YP-int(self.distance))+self.y[I+1]*(int(self.distance)-YM))
        print self.init_avg_dep_foa
        return self.init_avg_dep_foa

    def extrapolate_from_fig(self, ecosystem_type, distance, bisect_left, x, y): 
        self.distance = int(self.distance)   
        if self.distance in self.x:
            y_index = x.index(self.distance)
            self.init_avg_dep_foa = self.y[y_index] 
        else:
            i= bisect_left(self.x, self.distance) #find largest distance closest to value
            low1 = self.x[i-1] #assign nearest lowest x value for interpolation
            high1 = self.x[i] #assign nearest highest x value for interpolation
            low_i = i-1    #assign index values to use to find nearest y values for interpolation            
            high_i = i      #assign index values to use to find nearest y values for interpolation
            self.init_avg_dep_foa = ((self.distance - low1) * (self.y[high_i] - self.y[low_i]) / (high1 - low1)) + self.y[low_i]
        return self.init_avg_dep_foa
       
    def extrapolate_from_fig2(self, ecosystem_type, init_avg_dep_foa, bisect_left, x, y):
        self.init_avg_dep_foa = float(self.init_avg_dep_foa)
        if self.init_avg_dep_foa in self.y:
            x_index = y.index(self.init_avg_dep_foa)
            self.distance = self.x[x_index]    
        else:
            i = min(enumerate(self.y), key=lambda x: abs(x[1]-self.init_avg_dep_foa)) #finds smallest closest value closest to input value
            i2 = i[0]
            low1 = self.y[i2] #assign nearest lowest x value for interpolation
            high1 = self.y[i2-1] #assign nearest highest x value for interpolation
            low_i = i2    #assign index values to use to find nearest y values for interpolation            
            high_i = i2-1      #assign index values to use to find nearest y values for interpolation
            self.distance = ((self.init_avg_dep_foa - low1) * (self.x[high_i] - self.x[low_i]) / (high1 - low1)) + self.x[low_i]
        return self.distance
    def deposition_foa_to_gha_f(self, init_avg_dep_foa, application_rate):
        application_rate = float(application_rate)
        #self.init_avg_dep_foa = float(init_avg_dep_foa)
        print application_rate
        print init_avg_dep_foa
        self.avg_depo_gha = init_avg_dep_foa  * application_rate  * 10
        print self.avg_depo_gha
        return self.avg_depo_gha

    def deposition_foa_to_lbac_f(self, init_avg_dep_foa, application_rate):
        self.application_rate = float(self.application_rate)
        #print self.application_rate
        #print self.init_avg_dep_foa
        self.avg_depo_lbac = (self.init_avg_dep_foa /100)  * self.application_rate 
        #print self.avg_depo_lbac
        return self.avg_depo_lbac

    def deposition_lbac_to_gha_f(self, avg_depo_lbac):
        self.avg_depo_lbac = float(self.avg_depo_lbac)
        self.avg_depo_gha = self.avg_depo_lbac * (453.592) / 0.404686
        #print self.avg_depo_gha
        return self.avg_depo_gha    
    def deposition_gha_to_ngL_f(self, aquatic_type, avg_depo_gha):
        if (self.aquatic_type == '1'):

            self.deposition_ngL = self.avg_depo_gha * 0.05 * 1000
        else:
            self.deposition_ngL = self.avg_depo_gha * 0.05 * 1000 * (6.56 / 0.4921)
        return self.deposition_ngL

    def deposition_gha_to_mgcm_f(self, avg_depo_gha):
        self.deposition_mgcm = self.avg_depo_gha * 0.00001
        return self.deposition_mgcm

    def deposition_ngL_2_gha_f(self, deposition_ngL):
        self.deposition_ngL =float(self.deposition_ngL)
        if (self.aquatic_type == '1'):
            self.avg_depo_gha = self.deposition_ngL / (0.05 * 1000)
        else:
            self.avg_depo_gha = ((self.deposition_ngL / 6.56) * 0.4921) / (0.05 * 1000)
        return self.avg_depo_gha    

    def deposition_ghac_to_lbac_f(self, avg_depo_gha):
        self.avg_depo_gha = float(self.avg_depo_gha)
        self.avg_depo_lbac = (self.avg_depo_gha * 0.00220462 / 2.47105 ) 
        return self.avg_depo_lbac    

    def deposition_lbac_to_foa_f(self, avg_depo_lbac, application_rate):
        self.application_rate = float(self.application_rate)
        self.init_avg_dep_foa =  self.avg_depo_lbac / self.application_rate  
        return self.init_avg_dep_foa

    def deposition_mgcm_to_gha_f(self, deposition_mgcm):
        self.deposition_mgcm = float(self.deposition_mgcm)
        self.avg_depo_gha = self.deposition_mgcm /  0.00001 
        return self.avg_depo_gha




    
    

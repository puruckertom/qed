version: '2.1'
volumes:
  collected_static: {}
services:

  # QED Django front-end
  qed_django:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        version: ${VERSION:-latest}  # passing VERSION env var to Dockerfile as ARG, default = latest
    #image: quanted/qed:${VERSION:-latest}  # use qed image w/ tag = VERSION, default = latest
    expose:
      - "8080"
    volumes:
      - collected_static:/src/collected_static
      - .:/src  # map qed/ to container's /src for updating w/out rebuilding images
    environment:
      - REDIS_HOSTNAME=redis
      #these echo in the environmental variable to the running docker container
      #so that is can be picked up by the django settings 
      - DOCKER_HOSTNAME=${HOSTNAME}
      #- DOCKER_SECRET_KEY=${SECRET_KEY}
    links:
      - redis
      - mongodb

  # Redis (message broker)
  redis:
    image: redis:latest
    hostname: redis
    command: redis-server /usr/local/etc/redis/redis.conf
    volumes:
      - ./redis.config:/usr/local/etc/redis/redis.conf
    expose:
      - "6379"

  # ubertool_cts nodejs submodule
  cts_nodejs:
    build: ./cts_nodejs
    image: cts-nodejs
    expose:
      - "4000"
    environment:
      - NODEJS_HOST=cts_nodejs
      - NODEJS_PORT=4000
      - REDIS_HOSTNAME=redis
      - REDIS_PORT=6379
    links:
      - redis

  # # Celery worker - manager calc
  worker_manager:
    build:
      context: ./cts_celery
      dockerfile: Dockerfile
      args:
        version: ${VERSION:-latest}
    # build: ./cts_celery
    image: cts-celery
    command: celery worker -A tasks -Q manager_queue -l info -n manager_worker -c 1
    links:
      - redis
    environment:
      - REDIS_HOSTNAME=redis
      - DOCKER_HOSTNAME=${HOSTNAME}

  # # Celery worker - cts calc
  worker_cts:
    build:
      context: ./cts_celery
      dockerfile: Dockerfile
      args:
        version: ${VERSION:-latest}
    # build: ./cts_celery
    image: cts-celery
    command: celery worker -A tasks -Q cts_queue -l info -n cts_worker -c 2
    links:
      - redis
      - qed_django
      # - cts-tomcat
    environment:
      - REDIS_HOSTNAME=redis
      - DOCKER_HOSTNAME=${HOSTNAME}

  qed_nginx:
    restart: always
    # build: ../cts_nginx
    build: ./qed_nginx
    ports:
      - "80:80"
      - "443:443"
    links:
      - qed_django:uwsgi_django  # Nginx.conf can reference "qed_django" service with the hostname 'uwsgi' or 'qed_django'
      - cts_nodejs:cts_nodejs
      - qed_flask:uwsgi_flask
    volumes:
      - /var/www/nginx/certs:/etc/nginx/qed # this points to the keys directory
      - /etc/letsencrypt:/etc/nginx/azure  # certs for azure (used certbot)
    volumes_from:
      - qed_django:ro  # Mount all volumes from "qed_django" to NGINX, so it can access the collected static files

  # flask_qed Flask back-end
  qed_flask:
    build: ./flask_qed
    expose:
      - "7777"
    links:
      - redis
      - mongodb
      - qed_celery
    environment:
      - REDIS_HOSTNAME=redis
      - DOCKER_HOSTNAME=${HOSTNAME}
    volumes:
      - /var/www/sampreprocessed:/src/pram_flask/ubertool/ubertool/sam/bin/Preprocessed
      - /var/www/samresults:/src/pram_flask/ubertool/ubertool/sam/bin/Results
      - /var/www/qed-basins:/src/hms_flask/data/qed-basins
      - collected_static:/src/collected_static
    depends_on:
      - mongodb
    logging:
      options:
        max-size: "200k"
        max-file: "10"

  # mongoDB database container
  mongodb:
    image: mongo:latest
    volumes:
      - /var/www/mongodb:/data/db
    expose:
      - "27017"

  # Celery container for async task execution
  qed_celery:
    build: ./flask_qed
    volumes:
      - /var/www/sampreprocessed:/src/pram_flask/ubertool/ubertool/sam/bin/Preprocessed
      - "../samresults:/src/pram_flask/ubertool/ubertool/sam/bin/Results"
      - "../qed-basins:/src/hms_flask/data/qed-basins"
      - collected_static:/src/collected_static
    links:
      - redis
      - mongodb
    command: celery worker -A celery_cgi -Q qed --loglevel=INFO -c 2 -n qed_worker
    environment:
      - REDIS_HOSTNAME=redis
      - DOCKER_HOSTNAME=${HOSTNAME}
    logging:
      options:
        max-size: "200k"
        max-file: "10"

  hms_dotnetcore:
    build:
      context: ./windows/hms
      dockerfile: Web.Services/Dockerfile
    environment:
      - MONGODB=mongodb
      - FLASK_SERVER=http://qed-nginx:7777
    expose:
     - "80"
    volumes:
      #- "./windows/hms/Web.Services/App_Data:/app/App_Data"
      - /var/www/app_data/hms:/app/App_Data

  # Dask Containers
  dask_scheduler:
    image: daskdev/dask
    hostname: dask-scheduler
    expose:
     - 8786
     - 8787
    command: ["dask-scheduler"]

  dask_worker:
    build:
      context: .
      dockerfile: Dask_Dockerfile
    #image: daskdev/dask
    hostname: dask-worker
    environment:
      PYTHONPATH: '/src:/src/qed'
      IN_DOCKER: "True"
    #command: ["dask-worker", "dask_scheduler:8786"]
    volumes:
       - "../qed:/src/qed"

  # Apache Tomcat container
  qed-tomcat:
    build:
      # context: ./qed_tomcat
      context: .
      dockerfile: Dockerfile_Tomcat
    image: qed_tomcat:${VERSION:-latest}
    expose:
      - "8080"
    environment:
      - JAVA_OPTS=-Xmx512m
    volumes:
      - ./secrets/tomcat/tomcat-users.xml:/usr/local/tomcat/conf/tomcat-users.xml
      - ./secrets/tomcat/webapps:/usr/local/tomcat/webapps
      - ./secrets/tomcat/chemaxon/licenses:/home/tomcat/.chemaxon/licenses

  pisces-db:
    image: mdillon/postgis
    expose:
      - "5432"
    volumes:
      - /var/www/pisces:/docker-entrypoint-initdb.d
